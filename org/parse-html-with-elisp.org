#+TITLE: 使用elisp解析html
#+DATE: 2020-03-09
#+CATEGORY: Emacs
#+STARTUP: content
#+OPTIONS: toc:nil H:2 num:2
#+INCLUDE: ../code/post-info.org
#+TOC: headlines:2

我在使用orgMode搭建静态博客时，需要直接使用elisp生成部分html代码，便写了这个 =parse-html= 函数。

*用法：*


#+BEGIN_SRC emacs-lisp
(insert (parse-html
	 '(div :class "post-div" :style "text-align:center;"
	       "text in div"
	       (h3 (a :href "url" "post-title") "another h3 content")
	       (p "digest")
	       (img :href "url")
	       (code (a :href "url" "tagname"))
	       (span "date"))))
#+END_SRC


#+BEGIN_SRC emacs-lisp
(defun parse-html--get-plist (list)
  "get attributes of a tag"
  (let* ((i 0)
	 (plist nil))
    (while (and (nth i list) (symbolp (nth i list)))
      (setq key (nth i list))
      (setq value (nth (1+ i) list))
      (setq plist (append plist (list key value)))
      (incf i 2))
    plist))

(defun parse-html--get-inner (list)
  "get inner html of a tag"
  (let* ((i 0)
	 (inner nil)
	 (plist (parse-html--get-plist list)))
    (if (null plist)
	(setq inner list)
      (dolist (p plist)
	(setq inner (remove p list))
	(setq list inner)))
    inner))

(defun parse-html--plist->alist (plist)
  "convert plist to alist"
  (if (null plist)
      '()
    (cons
     (list (car plist) (cadr plist))
     (plist->alist (cddr plist)))))

(defun parse-html--insert-html-tag (tag &optional attrs)
  "insert html tag and attributes"
  (let ((single-tag-list '("img" "br" "hr" "input" "meta" "link" "param"))
	(tag (symbol-name tag))
	(attrs (parse-html--plist->alist attrs)))
    (if (member tag single-tag-list)
	(progn
	  (insert (concat "<" tag "/>"))
	  (backward-char 2)
	  (dolist (attr attrs)
	    (insert (concat " " (substring (symbol-name (car attr)) 1) "=" "\"" (cadr attr) "\"")))
	  (forward-char 2))
      (progn
	(insert (concat "<" tag ">" "</" tag ">"))
	(backward-char (+ 4 (length tag)))
	(dolist (attr attrs)
	  (insert (concat " " (substring (symbol-name (car attr)) 1) "=" "\"" (cadr attr) "\"")))
	(forward-char 1)))
    ))

(defun parse-html--jump-outside (tag)
  (let ((single-tag-list '("img" "br" "hr" "input" "meta" "link" "param"))
	(tag (symbol-name tag)))
    (if (member tag single-tag-list)
	(forward-char 0)
      (forward-char (+ 3 (length tag))))))

(defun parse-html--parse-list (list)
  "parse elisp to html"
  (let* ((tag (car list))
	 (left (cdr list))
	 (plist (parse-html--get-plist left))
	 (inner (parse-html--get-inner left))
	 (html ""))
    (with-current-buffer (get-buffer-create "*parse html*")
      (parse-html--insert-html-tag tag plist)
      (dolist (item inner)
	(if (listp item)
	    (parse-html--parse-list item)
	  (insert item)))
      (parse-html--jump-outside tag)
      (setq html (buffer-substring-no-properties (point-min) (point-max))))
    html))

(defun parse-html (list)
  (interactive)
  (let ((html (parse-html--parse-list list)))
    (kill-buffer "*parse html*")
    html))
#+END_SRC
