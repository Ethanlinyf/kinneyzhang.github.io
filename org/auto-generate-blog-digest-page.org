#+TITLE: 自动生成org blog摘要页
#+DATE: 2020-02-22
#+CATEGORY: Emacs
#+INCLUDE: "../code/post-info.org"
#+STARTUP: content
#+OPTIONS: toc:nil H:2 num:2
#+TOC: headlines:2

博客摘要页面可以让读者快速了解文章的大概信息，因此一般将它作为博客首页，其重要性不言而喻。摘要页的主要信息包括：标题，摘要，日期，分类等。每篇文章都手动输入这些文字太麻烦，于是我用elisp和orgMode的[[https://orgmode.org/manual/Macro-Replacement.html][宏替代]]自动生成摘要页面。

先来看看折腾的效果，我用边框将每篇文章的主要信息区分开。
{{{org-img(1,1,("https://geekinney-1258820352.cos.ap-hongkong.myqcloud.com/geekblog/img/post-digest-page.png"))}}}

由于摘要页面对于排版有一定的要求，所以纯orgMode导出不能满足需求，我采取的办法是在orgMode中直接插入html。和Markdown不同，orgMode中插入html需要将代码包裹在 =#+begin_export html= 和 =#+end_export= 之间。

从上图看出，每篇文章的html代码有相同的格式：

#+BEGIN_SRC html
<div class="post-div">
  <h3><a href="post-url">title</a></h3>
  <p>
    digest......
    <a href="post-url">阅读全文</a>
  </p>
  <code><a href="category-url">category</a></code>
  <span>date</span>
</div>
#+END_SRC

接下来，需要使用elisp获取每篇文章的 =title= =digest= =date= =category= =post-url= =category-url= 这些变量的值。将这些值填入html对应的位置，再将所有文章的html代码连接在一起插入orgMode的html导出模版内。

处理html的elisp函数如下：

#+BEGIN_SRC emacs-lisp
(defun my/insert-html-tag-with-attr (tag &optional attr)
  "insert a html tag and some attributes at cursor point"
  ;; (interactive "sinput tag name: \nsis single tag? [y or n]: ")
  (let ((single-tag-list '("img" "br" "hr" "input" "meta" "link" "param")))
    (if (member tag single-tag-list)
	(progn
	  (insert (concat "<" tag "/>"))
	  (backward-char 2)
	  (mapcar (lambda (x) (insert (concat " " (car x) "=" "\"" (cadr x) "\""))) attr)
	  (forward-char 2)
	  )
      (progn
	(insert (concat "<" tag ">" "</" tag ">"))
	(backward-char (+ 4 (length tag)))
	(mapcar (lambda (x) (insert (concat " " (car x) "=" "\"" (cadr x) "\""))) attr)
	(forward-char 1)
	))
    ))

(defun my/blog-generate-index (posts)
  "generate blog index page"
  (interactive)
  (let ((post-dir "~/iCloud/blog_site/org/")
	(category-url "https://blog.geekinney.com/post/category.html")
	(html-str ""))
    (if (stringp posts)
	(setq posts (read posts))) ;;宏的参数为字符串，需要先转为list
    (mapcar (lambda (post)
	      (with-temp-buffer
		(setq post-url (concat "https://blog.geekinney.com/post/" (car (split-string post "\\.")) ".html"))
		(insert-file-contents (concat post-dir post))
		(setq count (my/word-count))
		(goto-char (point-min))
		(re-search-forward "^#\\+TITLE")
		(setq title (plist-get (cadr (org-element-at-point)) :value))
		(goto-char (point-min))
		(re-search-forward "^#\\+DATE")
		(setq date (plist-get (cadr (org-element-at-point)) :value))
		(goto-char (point-min))
		(re-search-forward "^#\\+CATEGORY")
		(setq category (plist-get (cadr (org-element-at-point)) :value))
		(setq buffer-string (replace-regexp-in-string "^#\\+.+\n+" "" (buffer-substring-no-properties (point-min) (point-max)))
		      buffer-string (replace-regexp-in-string ".*\\* " "" buffer-string)
		      buffer-string (replace-regexp-in-string ".*\\*.+\\*" "" buffer-string)
		      buffer-string (replace-regexp-in-string ".*\\*\\* " "" buffer-string)
		      buffer-string (replace-regexp-in-string ".*\\*\\*\\* " "" buffer-string)
		      buffer-string (replace-regexp-in-string "^\n+" "" buffer-string)
		      buffer-string (replace-regexp-in-string "^\n+" "" buffer-string)
		      buffer-string (replace-regexp-in-string "^\n+" "" buffer-string)
		      buffer-string (replace-regexp-in-string "^\n+" "" buffer-string))
		(setq digest (substring buffer-string 0 170))
		
		(erase-buffer)
		
		(my/insert-html-tag-with-attr "div" '(("class" "post-div")))
		(my/insert-html-tag-with-attr "h3")
		(my/insert-html-tag-with-attr "a" (list (list "href" post-url)))
		(insert title)
		(forward-char 9)
		(my/insert-html-tag-with-attr "p")
		(insert (concat digest " ...... "))
		(my/insert-html-tag-with-attr "a" (list (list "href" post-url)))
		(insert "阅读全文")
		(forward-char 8)
		(my/insert-html-tag-with-attr "code")
		(my/insert-html-tag-with-attr "a" (list (list "href" category-url)))
		(insert category)
		(forward-char 11)
		(my/insert-html-tag-with-attr "span")
		(insert date)
		(forward-char 13)
		(insert "\n\n")
		(setq html-str (concat html-str (buffer-substring-no-properties (point-min) (point-max))))
		))
	    posts)
    (concat "#+begin_export html\n" html-str "#+end_export")))
#+END_SRC

最后就是在摘要页定义一个宏，执行 =my/blog-generate-index= 函数（关于“宏替代”的使用可以参看[[https://blog.geekinney.com/post/auto-generate-blog-relative-info.html][这篇文章]]）：

#+begin_example
#+MACRO: generate-index (eval (my/blog-generate-index $1))
#+end_example

宏调用的参数是一个包含文章名称的列表：

#+begin_example
{{{generate-index(
("auto-generate-blog-relative-info.org"
"elisp-hack-compress-and-convert-video.org"
"blog-light-and-dark-theme-switch.org"
"at-the-end-of-2019.org"
"experience-of-setting-up-my-own-blog-site.org"
"emacs-lisp-learning-note.org"
"using-org-to-blog-with-jekyll.org"
"listen-music-in-emacs.org"
"reading-notes-of-how-to-read-a-book-efficiently.org"
"get-started-with-emacs.org"
"thinking-about-cs-teaching-in-college.org"
"thinking-about-journaling.org"
"pick-up-reading-after-read-the-moon-and-sixpence.org"
"reading-notes-of-bullet-journal.org"
"emacs-learning-note.org")
)}}}
#+end_example

Ok，大功告成！
