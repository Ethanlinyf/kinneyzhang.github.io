#+TITLE: elisp guide学习笔记
#+DATE: 2019-12-18
#+STARTUP: content
#+OPTIONS: toc:t H:2 num:2

原文参考：[[https://github.com/chrisdone/elisp-guide][chrisdone/elisp-guide: A quick guide to Emacs Lisp programming]]


* 基础
  基本运算、字符串连接、函数体、变量定义

  #+BEGIN_SRC emacs-lisp
  (* 2 3)

  (concat "a" "b") ;; 字符串连接

  (defun func (arg1 arg2)
    "Always document your functions."
    <function body>)

  (defvar var-name <the value>
    "Always document your variables.")

  (let ((x 1)
	(y 2))
    ...)
  #+END_SRC

  使用 =let= 定义变量时，不能使用前面已经定义的变量，此时应该使用 =let*=

  #+BEGIN_SRC emacs-lisp
  (let* ((x 1)
	 (y x))
    ...)
  #+END_SRC

  一个表达式中一次执行多个命令，使用 =progn=

  #+BEGIN_SRC emacs-lisp
  (progn do-this
	 do-that)
  #+END_SRC

  比较操作

  #+BEGIN_SRC emacs-lisp
  (eq major-mode 'a)
  (= 0 1)
  (> 0 1)
  (string= "a" "b")
  (string> "a" "b")
  #+END_SRC

  详见：[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Equality-Predicates.html][Equality Predicates - GNU Emacs Lisp Reference Manual]]

* 基本概念
** Buffers

   #+BEGIN_SRC emacs-lisp
   (current-buffer) ;; 获取当前buffer
   (with-current-buffer buffer-or-name ...) ;; 临时使用指定buffer
   (set-buffer buffer-or-name) ;; 设置为当前buffer但不切换
   (switch-to-buffer name) ;; 切换到指定buffer
   #+END_SRC

   详见：[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffers.html#Buffers][Buffers - GNU Emacs Lisp Reference Manual]]

** Buffer本地变量
   定义buffer本地变量 

   #+BEGIN_SRC emacs-lisp
   (defvar your-variable-name nil "Your documentation here.")
   #+END_SRC

   在特定的buffer，设置buffer本地变量

   #+BEGIN_SRC emacs-lisp
   (set (make-local-variable 'your-variable-name) <the-value>)
   #+END_SRC

   详见：[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer_002dLocal-Variables.html#Buffer_002dLocal-Variables][Buffer-Local Variables - GNU Emacs Lisp Reference Manual]]

** Project范围内设置buffer本地变量
   为一个文件夹下文件设置buffer-local-variable，设置 [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html][.dir-locals.el 文件]]

   #+BEGIN_SRC emacs-lisp
   ((nil . ((indent-tabs-mode . t)
	    (fill-column . 80)))
    (c-mode . ((c-file-style . "BSD")
	       (subdirs . nil)))
    ("src/imported"
     . ((nil . ((change-log-default-name
		 . "ChangeLog.local"))))))
   #+END_SRC

** The point
   所有的elisp代码在当前buffer都有一个当前point，它代表光标的位置，是一个数字。详见：[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Point.html][Point - GNU Emacs Lisp Reference Manual]]

   #+BEGIN_SRC emacs-lisp
   (point) ;; 当前point
   (point-max) ;; buffer的最大point
   (point-min) ;; buffer的最小point (为什么它不一定等于0? 因为narrowing的存在).
   #+END_SRC

** The region
   当region处于激活状态时，可以使用elisp代码对文本进行操作。详见：[[https://www.gnu.org/software/emacs/manual/html_node/elisp/The-Region.html#The-Region][The Region - GNU Emacs Lisp Reference Manual]]

   #+BEGIN_SRC emacs-lisp
   (region-beginning) ;; region的开始，是一个point
   (region-end) ;; region的结束，是一个point
   (use-region-p) ;; 是否操作当前region
   (region-active-p) ;; region是否激活
   #+END_SRC

   一个使用了相关region函数的命令

   #+BEGIN_SRC emacs-lisp
   (defun print-upper-region ()
     "Demo to print the uppercased version of the active region."
     (interactive)
     (when (region-active-p)
       (message "%S" (let ((string (buffer-substring (region-beginning)
						     (region-end))))
		       (with-temp-buffer
			 (insert string)
			 (upcase-region (point-min)
					(point-max))
			 (buffer-substring-no-properties (point-min)
							 (point-max)))))))
   #+END_SRC
