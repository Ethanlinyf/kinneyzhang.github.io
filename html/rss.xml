<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title><![CDATA[Geekinney's Blog]]></title>
<description><![CDATA[Geekinney's Blog]]></description>
<link>https://blog.geekinney.com/</link>
<lastBuildDate>Fri, 22 Nov 2019 17:18:23 +0800</lastBuildDate>
<item>
  <title><![CDATA[故事：材质、结构、风格和银幕剧作的原理]]></title>
  <description><![CDATA[
<nav id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org7080be4">1. 序言</a></li>
<li><a href="#org207b4be">2. PART I 作家和故事艺术</a>
<ul>
<li><a href="#org27e77d1">2.1. 故事问题</a>
<ul>
<li><a href="#orgb584c00">2.1.1. 故事的衰竭</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</nav>
<p>
<b>《故事：材质、结构、风格和银幕剧作的原理》/ [美] Robert Mckee / 周铁东 译 / 开始阅读：Nov 10, 2019</b>
</p>

<div id="outline-container-org7080be4" class="outline-2">
<h2 id="org7080be4"><span class="section-number-2">1</span> 序言</h2>
<div class="outline-text-2" id="text-1">
<p>
○ 《故事》讲述的是原理，而不是规则。规则说：“你必须以这种方式做。”原理说：”这种方式有效&#x2026;&#x2026;而且经过了时间的验证。”两者有着本质的区别。
</p>

<p>
○ 《故事》讲诉的是永恒的、普遍的形式，而不是公式。
</p>

<p>
○ 《故事》讲诉的原始模型，而不是陈规俗套。原始模型故事挖掘出一种普遍性的人生体验，然后以独一无二、独具文化特异性的表现手法对它进行装饰。陈规俗套则将这一形式颠倒过来：其内容和形式的匮乏势所难免。它将自己局限于一种狭隘的、具有文化特性的体验之中，然后饰之以陈腐而无特色的庸常形式。
</p>

<p>
○ 《故事》的论述是一丝不苟的，而不是旁门捷径。尽管粗制滥造者能够以其打字速度迅速填满纸稿，但优秀的电影剧作家却总是惜字如金，不断删改，力图以最少的文字表达最多的信息。
</p>

<p>
○ 帕斯卡尔曾给朋友写过一封长而无当的书信，然后在信尾的又及中深表歉意，说他没有时间写一封短信。就像帕斯卡尔一样，剧作家们明白简约是关键，简明扼要需要花费时间，而卓越超群来自孜孜以求。
</p>

<p>
○ 《故事》论述的是写作的现实，而不是写作的秘诀。艺术的真谛并不是要策划什么阴谋来保守秘密。如果银幕剧作家未能以存粹的戏剧化场景打动我们，他就不能想小说家利用作者的声音或想戏剧作家利用独白一样，隐藏在自己的语言背后。
</p>

<p>
○ 《故事》论述的是如何精通这门艺术，而不是如何揣摩市场行情。
</p>

<p>
○ 《故事》论述的是对观众的尊重，而不是对观众的鄙薄。
</p>

<p>
○ 天才作家写不出好作品大抵有两个原因：要么是被一个他们觉得非证明不可的观念蒙蔽了双眼，要么是被一种他们必须表达的情感所驱策。而天才作家写出好作品一般是因为这个原因：他们被一种要打动观众的欲望所感动。
</p>

<p>
○ 《故事》论述的是独创，而不是复制。
</p>
</div>
</div>

<div id="outline-container-org207b4be" class="outline-2">
<h2 id="org207b4be"><span class="section-number-2">2</span> PART I 作家和故事艺术</h2>
<div class="outline-text-2" id="text-2">
</div>
<div id="outline-container-org27e77d1" class="outline-3">
<h3 id="org27e77d1"><span class="section-number-3">2.1</span> 故事问题</h3>
<div class="outline-text-3" id="text-2-1">
</div>
<div id="outline-container-orgb584c00" class="outline-4">
<h4 id="orgb584c00"><span class="section-number-4">2.1.1</span> 故事的衰竭</h4>
<div class="outline-text-4" id="text-2-1-1">
<p>
○ 日复一日，我们寻求亚里士多德在《伦理学》中提出的那一古老问题的答案：一个人应该如何度过他的一生？但问题的答案总是在规避着我们。当我们力图使我们的手段合乎我们的梦想时，当我们试图将我们的思想融入我们的激情时，当我们力图让我们的欲望变成现实时，那一问题的答案始终躲藏在飞速流转，难以捉摸的时间后面。我们犹如乘坐一艘飞船
</p>
</div>
</div>
</div>
</div>
<div class="taglist"><a href="https://blog.geekinney.com/tags.html">Tags</a>: <a href="https://blog.geekinney.com/tag-书摘.html">书摘</a> </div>]]></description>
  <category><![CDATA[书摘]]></category>
  <link>https://blog.geekinney.com/2019-11-12-reading-notes-of-STORY.html</link>
  <pubDate>Fri, 22 Nov 2019 17:18:23 +0800</pubDate>
</item>
<item>
  <title><![CDATA[elisp学习笔记]]></title>
  <description><![CDATA[
<nav id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org57accca">1. Elisp</a>
<ul>
<li><a href="#orgcf5e884">1.1. 概览</a>
<ul>
<li><a href="#org5555dac">1.1.1. 运行emacs-lisp的几种方式</a></li>
<li><a href="#orge64d561">1.1.2. 创建命令（interactive函数）</a></li>
<li><a href="#orgd65dda3">1.1.3. emacs探索</a></li>
</ul>
</li>
<li><a href="#org17ec146">1.2. elisp编程的基本设置</a></li>
<li><a href="#org5afa701">1.3. 基本运算</a>
<ul>
<li><a href="#org882b420">1.3.1. 算术</a></li>
<li><a href="#org12dbde5">1.3.2. 比较</a></li>
<li><a href="#org405f3cc">1.3.3. 列表</a></li>
</ul>
</li>
<li><a href="#org3654f65">1.4. 类型判断和Literals</a>
<ul>
<li><a href="#org994f5b4">1.4.1. Emacs Literals</a></li>
<li><a href="#orgc9d2dc3">1.4.2. 基本类型判断</a></li>
<li><a href="#orgf8574e8">1.4.3. 获取对象类型</a></li>
</ul>
</li>
<li><a href="#orga477271">1.5. 变量定义</a></li>
<li><a href="#org5c51cbd">1.6. 函数定义</a>
<ul>
<li><a href="#orgbcd4ccb">1.6.1. 定义简单函数</a></li>
<li><a href="#org23d8042">1.6.2. 匿名函数/Lambda函数</a></li>
<li><a href="#orgaccc938">1.6.3. 函数作为参数</a></li>
<li><a href="#org0bc7327">1.6.4. 多参函数</a></li>
<li><a href="#org3e21663">1.6.5. 可选参数函数</a></li>
<li><a href="#org3f1dbd2">1.6.6. 含属性列表参数函数</a></li>
<li><a href="#org13abdb6">1.6.7. Closures</a></li>
</ul>
</li>
<li><a href="#org8cf8273">1.7. 列表操作</a></li>
<li><a href="#org160a9d7">1.8. 关联列表和属性列表</a>
<ul>
<li><a href="#org5b6cef5">1.8.1. 概览</a></li>
<li><a href="#org540a6e8">1.8.2. 关联列表/Alist</a></li>
<li><a href="#org8c07df8">1.8.3. 属性列表</a></li>
<li><a href="#org82cc9d4">1.8.4. 转换Alist成Plist和vice-versa</a></li>
</ul>
</li>
<li><a href="#org8d28447">1.9. 字符串</a></li>
<li><a href="#orgd8aaec4">1.10. 符号</a></li>
<li><a href="#orgd9ba9c3">1.11. 类型转换</a></li>
<li><a href="#org18d3852">1.12. 求值</a></li>
<li><a href="#org17d79a1">1.13. Defalias</a></li>
<li><a href="#org7e3ac16">1.14. 控制结构</a>
<ul>
<li><a href="#org5cf5ab2">1.14.1. Conditional Statement</a></li>
<li><a href="#orga03bd99">1.14.2. Cond - Case Switch</a></li>
<li><a href="#org0b48d9d">1.14.3. CL-Case - Case Switch</a></li>
<li><a href="#orgaa1a91d">1.14.4. 循环</a></li>
<li><a href="#org547e7a9">1.14.5. 函数式编程</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</nav>
<p>
学习来源： <a href="http://caiorss.github.io/Emacs-Elisp-Programming/Elisp_Programming.html">Elisp Programming</a>
</p>

<div id="outline-container-org57accca" class="outline-2">
<h2 id="org57accca"><span class="section-number-2">1</span> Elisp</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-orgcf5e884" class="outline-3">
<h3 id="orgcf5e884"><span class="section-number-3">1.1</span> 概览</h3>
<div class="outline-text-3" id="text-1-1">
</div>
<div id="outline-container-org5555dac" class="outline-4">
<h4 id="org5555dac"><span class="section-number-4">1.1.1</span> 运行emacs-lisp的几种方式</h4>
<div class="outline-text-4" id="text-1-1-1">
<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">

<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">key</th>
<th scope="col" class="org-left">command</th>
<th scope="col" class="org-left">description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left"><code>C-x C-e</code></td>
<td class="org-left"><code>eval-last-sexp</code></td>
<td class="org-left">在S表达式结尾运行，在minibuffer显示结果</td>
</tr>

<tr>
<td class="org-left"><code>C-j</code></td>
<td class="org-left"><code>eval-print-last-sexp</code></td>
<td class="org-left">在S表达式结尾运行，打印运行结果</td>
</tr>

<tr>
<td class="org-left"><code>M-:</code></td>
<td class="org-left"><code>eval-expression</code></td>
<td class="org-left">在minibuffer输入命令并执行</td>
</tr>

<tr>
<td class="org-left"><code>M-x ielm</code></td>
<td class="org-left"><code>ielm</code></td>
<td class="org-left">使用IELM解释器运行代码</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-orge64d561" class="outline-4">
<h4 id="orge64d561"><span class="section-number-4">1.1.2</span> 创建命令（interactive函数）</h4>
<div class="outline-text-4" id="text-1-1-2">
<div class="col-auto">
<pre><code class="emacs-lisp"><span style="color: #b22222;">;; </span><span style="color: #b22222;">example</span>
(<span style="color: #a020f0;">defun</span> <span style="color: #0000ff;">buffer/insert-filename</span> ()
  <span style="color: #8b2252;">"Insert file path of current buffer at current point"</span>
  (<span style="color: #a020f0;">interactive</span>)
  (insert (buffer-file-name (current-buffer))))
</code></pre>
</div>
</div>
</div>

<div id="outline-container-orgd65dda3" class="outline-4">
<h4 id="orgd65dda3"><span class="section-number-4">1.1.3</span> emacs探索</h4>
<div class="outline-text-4" id="text-1-1-3">
<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">

<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">key</th>
<th scope="col" class="org-left">command</th>
<th scope="col" class="org-left">description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left"><code>C-h k</code></td>
<td class="org-left"><code>describe-key</code></td>
<td class="org-left">运行命令后，继续按键，查看此时按键绑定的函数</td>
</tr>

<tr>
<td class="org-left"><code>C-h b</code></td>
<td class="org-left"><code>describe-bindings</code></td>
<td class="org-left">在*Help*界面搜索 <code>Major Mode Bindings:</code> 可以查看所有与当前major mode相关的按键。</td>
</tr>

<tr>
<td class="org-left"><code>C-h f</code></td>
<td class="org-left"><code>describe-function</code></td>
<td class="org-left">查看函数文档及详细代码</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>

<div id="outline-container-org17ec146" class="outline-3">
<h3 id="org17ec146"><span class="section-number-3">1.2</span> elisp编程的基本设置</h3>
<div class="outline-text-3" id="text-1-2">
<p>
三个有用的pcakage:
</p>
<ul class="org-ul">
<li>rainbow-delimiters: 不同颜色区分不同层级的括号</li>
<li>paredit: 检查括号匹配</li>
<li>company: elisp代码补全</li>
</ul>
</div>
</div>

<div id="outline-container-org5afa701" class="outline-3">
<h3 id="org5afa701"><span class="section-number-3">1.3</span> 基本运算</h3>
<div class="outline-text-3" id="text-1-3">
</div>
<div id="outline-container-org882b420" class="outline-4">
<h4 id="org882b420"><span class="section-number-4">1.3.1</span> 算术</h4>
<div class="outline-text-4" id="text-1-3-1">
<pre class="example">
ELISP&gt; (+ 20 30)
50
ELISP&gt; (- 100 80)
20
ELISP&gt; (+ 1 2 3 4 5 6)
21
ELISP&gt; (* 1 2 3 4 5 6)
720
ELISP&gt; (/ 1 100)
0

ELISP&gt; (&gt; 10 1) ;; ?? 10 &gt; 1
t
ELISP&gt; (&lt; 2 8) ;; ?? 2 &lt; 8
t
ELISP&gt; (&lt; 8 2) ;; ?? 8 &lt; 2
nil

ELISP&gt; (= 2 2)
t
ELISP&gt; (= 2 4)
nil

ELISP&gt; (/= 2 2)
nil
ELISP&gt; (exp -1)
0.36787944117144233
ELISP&gt; (log 10)
2.302585092994046
ELISP&gt; (sin pi)
1.2246467991473532e-16
ELISP&gt; (cos pi)
-1.0
ELISP&gt; (tan (/ pi 2))
1.633123935319537e+16
ELISP&gt;
</pre>
</div>
</div>

<div id="outline-container-org12dbde5" class="outline-4">
<h4 id="org12dbde5"><span class="section-number-4">1.3.2</span> 比较</h4>
<div class="outline-text-4" id="text-1-3-2">
<pre class="example">
;;;; Compare Numbers
ELISP&gt; (= 2 (+ 1 1))
t

;;; Compare Symbols and Numbers
ELISP&gt; (eq 1 1)
t
ELISP&gt; (eq 1 2)
nil
ELISP&gt;

ELISP&gt; (eq 'x 'x)
t
ELISP&gt;

;;; Compare Elements of a List
ELISP&gt; (equal (list 1 2 3 4) (list 1 2 3 4))
t

;;; Compare Strings
ELISP&gt; (string= "hello" "hello")
t
</pre>
</div>
</div>

<div id="outline-container-org405f3cc" class="outline-4">
<h4 id="org405f3cc"><span class="section-number-4">1.3.3</span> 列表</h4>
<div class="outline-text-4" id="text-1-3-3">
<pre class="example">
ELISP&gt; '(10 20 30 40)
(10 20 30 40)

ELISP&gt; '(10 203 40 "hello" () ("empty" 65))
(10 203 40 "hello" nil
    ("empty" 65))
</pre>
</div>
</div>
</div>

<div id="outline-container-org3654f65" class="outline-3">
<h3 id="org3654f65"><span class="section-number-3">1.4</span> 类型判断和Literals</h3>
<div class="outline-text-3" id="text-1-4">
</div>
<div id="outline-container-org994f5b4" class="outline-4">
<h4 id="org994f5b4"><span class="section-number-4">1.4.1</span> Emacs Literals</h4>
<div class="outline-text-4" id="text-1-4-1">
<pre class="example">
;;; Numbers
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ELISP&gt; 1e3
1000.0

;;; String
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ELISP&gt; "Hello World Emacs Literals"
"Hello World Emacs Literals"
ELISP&gt;

;;; Symbol
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

ELISP&gt; 'this-a-symbol
this-a-symbol

ELISP&gt; 'vector-&gt;list
vector-&gt;list

ELISP&gt; 'symbol?
symbol\?
ELISP&gt;

;; Boolean t and nil
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ELISP&gt; t
t
ELISP&gt; nil
nil
ELISP&gt;

 ;;; Everything that is not "nil" is true:
 ;;-----------------------------------------
ELISP&gt; (if t "It is true (not nil)" "It is false (it is nil)")
"It is true (not nil)"
ELISP&gt;
ELISP&gt; (if 100e3 "It is true (not nil)" "It is false (it is nil)")
"It is true (not nil)"
ELISP&gt; (if '(a b c d)  "It is true (not nil)" "It is false (it is nil)")
"It is true (not nil)"
ELISP&gt;

ELISP&gt; (if nil  "It is true (not nil)" "It is false (it is nil)")
"It is false (it is nil)"
ELISP&gt;

;;; Pair / Cons Cell
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ELISP&gt; '(a . b)
(a . b)

ELISP&gt; '(a . 2999)
(a . 2999)

;;; List
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ELISP&gt; '(1 2 3 (3 4) (5 6 (+ 3 4)) 10 'a 'b "hello" )
(1 2 3
   (3 4)
   (5 6
      (+ 3 4))
   10 'a 'b "hello")

ELISP&gt; '(+ 1 2 3 4 5)
(+ 1 2 3 4 5)

ELISP&gt; '(cos 10)
(cos 10)

;;; Vectors
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ELISP&gt; [1 2 3 4 (+ 1 2 3 54)]
[1 2 3 4
   (+ 1 2 3 54)]
</pre>
</div>
</div>

<div id="outline-container-orgc9d2dc3" class="outline-4">
<h4 id="orgc9d2dc3"><span class="section-number-4">1.4.2</span> 基本类型判断</h4>
<div class="outline-text-4" id="text-1-4-2">
<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">

<col  class="org-left">

<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Type</th>
<th scope="col" class="org-left">Predicate</th>
<th scope="col" class="org-left">Literal</th>
<th scope="col" class="org-left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Nil</td>
<td class="org-left">null</td>
<td class="org-left">nil '()</td>
<td class="org-left">Test if argument is nil</td>
</tr>

<tr>
<td class="org-left">Numbers</td>
<td class="org-left">numberp</td>
<td class="org-left">100, 200e3</td>
<td class="org-left">Test if it is number.</td>
</tr>

<tr>
<td class="org-left">String</td>
<td class="org-left">stringp</td>
<td class="org-left">"hello"</td>
<td class="org-left">Test if it is string</td>
</tr>

<tr>
<td class="org-left">Symbol</td>
<td class="org-left">symbolp</td>
<td class="org-left">'sym :keyworkd</td>
<td class="org-left">Test if it is a symbol.</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">Atom</td>
<td class="org-left">atom</td>
<td class="org-left">'x "h" :key 200</td>
<td class="org-left">Everything that is not a list or pair is an atom.</td>
</tr>

<tr>
<td class="org-left">List</td>
<td class="org-left">listp</td>
<td class="org-left">'(1 2 x y)</td>
<td class="org-left">Test if it is a list</td>
</tr>

<tr>
<td class="org-left">Pair</td>
<td class="org-left">consp</td>
<td class="org-left">'(a . 200)</td>
<td class="org-left">Test if it is a pair (cons cell)</td>
</tr>

<tr>
<td class="org-left">Vector</td>
<td class="org-left">vectorp</td>
<td class="org-left">[1 200 'sym]</td>
<td class="org-left">Test if it is a vector</td>
</tr>
</tbody>
</table>

<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Object</th>
<th scope="col" class="org-left">Predicate</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Buffer</td>
<td class="org-left">bufferp</td>
</tr>

<tr>
<td class="org-left">Window</td>
<td class="org-left">windowp</td>
</tr>

<tr>
<td class="org-left">Frame</td>
<td class="org-left">framep</td>
</tr>

<tr>
<td class="org-left">Process</td>
<td class="org-left">processp</td>
</tr>
</tbody>
</table>

<pre class="example">
ELISP&gt; (null nil)
t
ELISP&gt;
ELISP&gt; (null '())
t

ELISP&gt; (null 10)
nil

ELISP&gt; (atom 10)
t
ELISP&gt; (atom '(a . b))
nil
ELISP&gt; (atom "hello world")
t
ELISP&gt;

ELISP&gt; (bufferp (current-buffer))
t
ELISP&gt; (bufferp (selected-window))
nil
ELISP&gt; (windowp (selected-window))
t
ELISP&gt;
</pre>
</div>
</div>

<div id="outline-container-orgf8574e8" class="outline-4">
<h4 id="orgf8574e8"><span class="section-number-4">1.4.3</span> 获取对象类型</h4>
<div class="outline-text-4" id="text-1-4-3">
<pre class="example">
ELISP&gt; (type-of (current-buffer))
buffer
ELISP&gt;
ELISP&gt; (type-of (selected-window))
window
ELISP&gt;

ELISP&gt; (equal 'buffer (type-of (current-buffer)))
t
ELISP&gt; (equal 'buffer (type-of (selected-window)))
nil
ELISP&gt;
</pre>
</div>
</div>
</div>
<div id="outline-container-orga477271" class="outline-3">
<h3 id="orga477271"><span class="section-number-3">1.5</span> 变量定义</h3>
<div class="outline-text-3" id="text-1-5">
<pre class="example">
;;; Constants
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

ELISP&gt; (defconst zsh-shell "/usr/bin/zsh")
zsh-shell

ELISP&gt; zsh-shell
"/usr/bin/zsh"
ELISP&gt;

;;; Define a variable
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;; Set is not used very much
;;
ELISP&gt; (set 'avar "hello world")
"hello world"

ELISP&gt; avar
"hello world"
ELISP&gt;

;;;;; The most used command for assignment is setq
;;
ELISP&gt; (setq x 10)
10

ELISP&gt; (setq avar "hello world")
"hello world"

ELISP&gt; x
10

ELISP&gt; avar
"hello world"
ELISP&gt;

ELISP&gt; (setq my-list '(10 20 30 40))
(10 20 30 40)

ELISP&gt; my-list
(10 20 30 40)

;;; Multiple Assignment
;;
ELISP&gt; (setq a 10 b 20 c "Emacs")
"Emacs"
ELISP&gt; a
10
ELISP&gt; b
20
ELISP&gt; c
"Emacs"
ELISP&gt;

;; Dynamic Scoping  (Local Variables)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
ELISP&gt; (let ((x 1) (y 10)) (+ (* 4 x) (* 5 y)) )
54
ELISP&gt; x
    ** Eval error **  Symbol's value as variable is void: x
ELISP&gt; y
    ** Eval error **  Symbol's value as variable is void: y
ELISP&gt;
</pre>
</div>
</div>
<div id="outline-container-org5c51cbd" class="outline-3">
<h3 id="org5c51cbd"><span class="section-number-3">1.6</span> 函数定义</h3>
<div class="outline-text-3" id="text-1-6">
</div>
<div id="outline-container-orgbcd4ccb" class="outline-4">
<h4 id="orgbcd4ccb"><span class="section-number-4">1.6.1</span> 定义简单函数</h4>
<div class="outline-text-4" id="text-1-6-1">
<p>
语法: (defun &lt;function name&gt; (&lt;parameters&gt;) (&lt;body&gt;))
</p>
<pre class="example">
ELISP&gt; (defun afunction (a b c) (+ a b c))
afunction

ELISP&gt; (afunction 10 20 30)
60

ELISP&gt; (defun myfun () (message "Hello Emacs"))
myfun
ELISP&gt; (myfun)
"Hello Emacs"
ELISP&gt;


ELISP&gt;
ELISP&gt; (defun signum (n)
     (cond ((&gt; n 0) 1 )
           ((&lt; n 0) -1)
           (0)))
signum
ELISP&gt; (signum 10)
1
ELISP&gt; (signum 0)
0
ELISP&gt; (signum -23)
-1
ELISP&gt;


ELISP&gt; (defun factorial (n)
     (if (= n 0)
         1
         (* n (factorial (- n 1)))))
factorial

ELISP&gt; (factorial 5)
120
ELISP
</pre>
</div>
</div>
<div id="outline-container-org23d8042" class="outline-4">
<h4 id="org23d8042"><span class="section-number-4">1.6.2</span> 匿名函数/Lambda函数</h4>
<div class="outline-text-4" id="text-1-6-2">
<p>
语法: (lambda (&lt;parameters&gt;) (&lt;body&gt;))
</p>
<pre class="example">
ELISP&gt; (lambda (x) (+ x 3))
(lambda
  (x)
  (+ x 3))

;;; Applying Lambda Functions
;;

ELISP&gt; ((lambda (x) (+ x 3)) 4)
7
ELISP&gt; (funcall (lambda (x) (+ x 3)) 4)
7
ELISP&gt;

;;; Storing Lambda Function in Variable
;;
;;

ELISP&gt; (defvar add3 (lambda (x) (+ x 3)))
add3


ELISP&gt; add3
(lambda
  (x)
  (+ x 3))

ELISP&gt; (funcall add3 10)
13

ELISP&gt; (add3 10)
    ** Eval error **  Symbol's function definition is void: add3

ELISP&gt; (funcall #'add3 10)
    ** Eval error **  Symbol's function definition is void: add3
ELISP&gt;

;;; Passing Lambda Function to functions
;;
ELISP&gt; (mapcar (lambda (x) (+ x 3))  '(1 2 3 4 5))
(4 5 6 7 8)
</pre>
</div>
</div>
<div id="outline-container-orgaccc938" class="outline-4">
<h4 id="orgaccc938"><span class="section-number-4">1.6.3</span> 函数作为参数</h4>
<div class="outline-text-4" id="text-1-6-3">
<p>
语法: (caller-function #'&lt;function-1&gt; #'&lt;function-1&gt; arg1 arg2 &#x2026;)
</p>

<p>
在函数内部，使用 <code>funcall</code> 调用函数作为参数
</p>

<pre class="example">
ELISP&gt; (mapcar log '(1 10 100 1000))
    ** Eval error **  Symbol's value as variable is void: log


ELISP&gt; (mapcar #'log10 '(1 10 100 1000))
(0.0 1.0 2.0 3.0)

(defun sum-fun (f1 f2 x)
  (+ (funcall f1 x) (funcall f2 x)))

ELISP&gt; (sum-fun #'log #'exp 3)
21.18414921185578
ELISP&gt;

ELISP&gt; (+ (log 3) (exp 3))
21.18414921185578
ELISP&gt;

ELISP&gt; (sum-fun (lambda (x) (* 3 x))
        (lambda (x) (* 4 x))
        5)
35
ELISP&gt;

ELISP&gt; (defun 1+ (x) (+ 1 x))
1+
ELISP&gt; (defun 3* (x) (* 3 x))
3*

ELISP&gt; (sum-fun #'1+  #'3* 4)
17
ELISP&gt;

ELISP&gt; (sum-fun #'1+  (lambda (x) (* 3 x)) 4)
17
ELISP&gt;
</pre>
</div>
</div>
<div id="outline-container-org0bc7327" class="outline-4">
<h4 id="org0bc7327"><span class="section-number-4">1.6.4</span> 多参函数</h4>
<div class="outline-text-4" id="text-1-6-4">
<pre class="example">
(defun sum (&amp;rest numbers)
  (apply #'+ numbers))

ELISP&gt; (sum 1 2 3 4 5 6)
21


ELISP&gt; (apply #'sum '(1 2 3 5 6))
17

ELISP&gt; (apply #'sum (list 1 2 3 5 (+ 6 5 2)))
24

ELISP&gt; (apply #'sum '())
0

ELISP&gt; (apply #'sum nil)
0

ELISP&gt; (sum nil)
    ** Eval error **  Wrong type argument: number-or-marker-p, ni

;;----------------------------------

(defun sum-prod (a &amp;rest xs)
  (* a (apply #'+ xs)))


ELISP&gt; (sum-prod 3 1 2 3 4 5)
45

ELISP&gt; (sum-prod 1 1 2 3 4 5)
15
</pre>
</div>
</div>
<div id="outline-container-org3e21663" class="outline-4">
<h4 id="org3e21663"><span class="section-number-4">1.6.5</span> 可选参数函数</h4>
<div class="outline-text-4" id="text-1-6-5">
<pre class="example">
(defun test-optional (a &amp;optional b)
  (list a b))

ELISP&gt; (test-optional 10 20)
(10 20)

ELISP&gt; (test-optional 10 )
(10 nil)

;--------------------------------;

(defun test-optional2 (a b &amp;optional b c d e)
  (list :a a :b b :c c :d d :e e))

ELISP&gt; (test-optional2 0 1 2 3 4 5 )
(:a 0 :b 2 :c 3 :d 4 :e 5)


ELISP&gt; (test-optional2 0 1 2 3 4  )
(:a 0 :b 2 :c 3 :d 4 :e nil)

ELISP&gt; (test-optional2 0 1 2 3   )
(:a 0 :b 2 :c 3 :d nil :e nil)

ELISP&gt; (test-optional2 0 1 2    )
(:a 0 :b 2 :c nil :d nil :e nil)

ELISP&gt; (test-optional2 0 1  )
(:a 0 :b nil :c nil :d nil :e nil)

ELISP&gt; (test-optional2 0 1)
(:a 0 :b nil :c nil :d nil :e nil)

;--------------------------------;

(defun test-optional-default-b (a &amp;optional b)
  (if b
      (list a b)
      (list a "b is null")))

ELISP&gt; (test-optional-default-b 1 2)
(1 2)

ELISP&gt; (test-optional-default-b 1)
(1 "b is null")

ELISP&gt; (test-optional-default-b 1 nil)
(1 "b is null")
</pre>
</div>
</div>
<div id="outline-container-org3f1dbd2" class="outline-4">
<h4 id="org3f1dbd2"><span class="section-number-4">1.6.6</span> 含属性列表参数函数</h4>
<div class="outline-text-4" id="text-1-6-6">
<pre class="example">
(defun make-shell-interface (&amp;rest params)
  "
  Create a shell interface.

  Possible parameters:

    :name      Name of shell
    :type      ['sh, 'bash, ...]
    :path      Path to program
    :buffer    Name of buffer

  "
  (let
       ((name   (plist-get params :name ))
        (type   (plist-get params :type))
        (path   (plist-get params :path))
        (buffer (plist-get params :buffer)))
    (list
     (cons 'name buffer)
     (cons 'type type)
     (cons 'path path)
     (cons 'buffer buffer))))


ELISP&gt; (make-shell-interface :name "pylaucher" :path "/usr/bin/python" :type 'sh :buffer "pyshell")
((name . "pyshell")
 (type . sh)
 (path . "/usr/bin/python")
 (buffer . "pyshell"))

ELISP&gt; (make-shell-interface :name "pylaucher" :path "/usr/bin/python" :type 'sh)
((name)
 (type . sh)
 (path . "/usr/bin/python")
 (buffer))

ELISP&gt; (make-shell-interface :name "pylaucher" :path "/usr/bin/python" :type 'bash)
((name)
 (type . bash)
 (path . "/usr/bin/python")
 (buffer))

ELISP&gt; (make-shell-interface :name "pylaucher" :path "/usr/bin/python")
((name)
 (type)
 (path . "/usr/bin/python")
 (buffer))

ELISP&gt; (make-shell-interface :name "pylaucher" )
((name)
 (type)
 (path)
 (buffer))

ELISP&gt; (make-shell-interface  )
((name)
 (type)
 (path)
 (buffer))

ELISP&gt; (make-shell-interface :buffer "pyshell"  :path "/usr/bin/python" :type 'sh :name "pylaucher")
((name . "pyshell")
 (type . sh)
 (path . "/usr/bin/python")
 (buffer . "pyshell"))
</pre>
</div>
</div>
<div id="outline-container-org13abdb6" class="outline-4">
<h4 id="org13abdb6"><span class="section-number-4">1.6.7</span> Closures</h4>
<div class="outline-text-4" id="text-1-6-7">
<p>
elisp方言默认不支持closure，所以下面的代码不会像Scheme或Common Lisp一样执行。
</p>

<p>
参考：
</p>
<ul class="org-ul">
<li><a href="https://www.emacswiki.org/emacs/LexicalBinding">EmacsWiki: Lexical Binding</a></li>
<li><a href="https://www.emacswiki.org/emacs/DynamicBindingVsLexicalBinding">EmacsWiki: Dynamic Binding Vs Lexical Binding</a></li>
<li><a href="https://nullprogram.com/blog/2013/12/30/">Emacs Lisp Readable Closures « null program</a></li>
<li><a href="https://www.jamesporter.me/2013/06/14/emacs-lisp-closures-exposed.html">https://www.jamesporter.me/2013/06/14/emacs-lisp-closures-exposed.html</a></li>
<li><a href="http://technical-dresese.blogspot.com/2011/04/brief-demonstration-of-emacs-new.html">Technical Dresese: A brief demonstration of emacs new lexical bindings</a></li>
</ul>

<pre class="example">
(defun make-adder (x)
  (lambda (y) (+ x y)))


ELISP&gt;
ELISP&gt; (make-adder 3)
(lambda
  (y)
  (+ x y))

ELISP&gt; ((make-adder 3) 4)
    ** Eval error **  Invalid function: (make-adder 3)
ELISP&gt; (funcall (make-adder 3) 4)
    ** Eval error **  Symbol's value as variable is void: x
ELISP&gt; (map (make-adder 3) '(1 2 3 4 5))
    ** Eval error **  Symbol's value as variable is void: x
ELISP&gt;
</pre>

<p>
支持closure的代码：
</p>
<pre class="example">
(setq lexical-binding t)

(defun make-adder (x)
  (lambda (y) (+ x y)))

ELISP&gt; (make-adder 3)
(closure
 ((x . 3)
  t)
 (y)
 (+ x y))

ELISP&gt; ((make-adder 3) 4)
    ** Eval error **  Invalid function: (make-adder 3)
ELISP&gt;

ELISP&gt; (funcall (make-adder 3) 4)
7
ELISP&gt;

ELISP&gt; (mapcar (make-adder 3) '(1 2 3 4 5))
(4 5 6 7 8)


;;;; Sometimes is better to create macro rather than a higher order function


(defmacro make-sum-fun (f1 f2)
  `(lambda (x) (+ (,f1 x) (,f2 x))))

ELISP&gt;
ELISP&gt; (funcall (make-sum-fun sin cos) 3)
-0.8488724885405782
ELISP&gt;
ELISP&gt; (make-sum-fun sin cos)
(closure
 (t)
 (x)
 (+
  (sin x)
  (cos x)))

ELISP&gt; (map (make-sum-fun sin cos) '(1 2 3 4 5))
(1.3817732906760363 0.4931505902785393 -0.8488724885405782 -1.4104461161715403 -0.6752620891999122)
</pre>

<p>
在 <code>~/.emacs.d/init.el</code> 中添加如下配置以支持closure.
</p>
<pre class="example">
(setq lexical-binding t)
</pre>
</div>
</div>
</div>
<div id="outline-container-org8cf8273" class="outline-3">
<h3 id="org8cf8273"><span class="section-number-3">1.7</span> 列表操作</h3>
<div class="outline-text-3" id="text-1-7">
<p>
参考：
</p>
<ul class="org-ul">
<li><a href="https://www.fincher.org/tips/Languages/Emacs.shtml">https://www.fincher.org/tips/Languages/Emacs.shtml</a></li>
</ul>

<pre class="example">
;; Defining a List
;;
;; An emacs list can contain elements of almost any type.
;;
ELISP&gt; '( "a" 2323 "b" 21.2323 "hello" "emacs" nil () (34 134) '(+ 2 3 5))
("a" 2323 "b" 21.2323 "hello" "emacs" nil nil
 (34 134)
 '(+ 2 3 5))

ELISP&gt; (quote (1 3 3 4 5))
(1 3 3 4 5)

;;;;; Empty List
;;
ELISP&gt; nil
nil
ELISP&gt; '()
nil
ELISP&gt;

;; Length of a list
ELISP&gt; (length '(1 2 3 4 5 6))
6
ELISP&gt;


;; nth element of a list
;;
ELISP&gt; (nth 0 '(0 1 2 3 4 5))
0
ELISP&gt; (nth 2 '(0 1 2 3 4 5))
2
ELISP&gt; (nth 5 '(0 1 2 3 4 5))
5
ELISP&gt; (nth 10 '(0 1 2 3 4 5))
nil
ELISP&gt;


;; Membership test
;; member returns null if the element is not member of the list
;;
ELISP&gt; (member 2 '(0 1 2 3 4 5))
(2 3 4 5)

ELISP&gt; (member 10 '(0 1 2 3 4 5))
nil
ELISP&gt;

;; Position of list element (prior to emacs 24.4)
;;
ELISP&gt; (position 7 '(5 6 7 8))
2

ELISP&gt; (position 17 '(5 6 7 8))
nil
ELISP&gt;

;; Position of list element (emacs 24.4 or later)
;;
ELISP&gt; (cl-position 7 '(5 6 7 8))
2

ELISP&gt; (cl-position 17 '(5 6 7 8))
nil
ELISP&gt;

;; cdr
;;
;; Removes first element of the list, returns the list tail.
;;
ELISP&gt; (cdr '(1 2 3 4 5))
(2 3 4 5)

;; car
;;
;; Returns the first list element
;;
ELISP&gt; (car '(1 2 3 4 5))
1
ELISP&gt;


;; cons
;;
;; List constructor
;;
ELISP&gt; (cons 10 '(1 2 3 4))
(10 1 2 3 4)

ELISP&gt; (cons 1 (cons 2 (cons 3 (cons 4 (cons 5 '())))))
(1 2 3 4 5)

;; Last element of a list
;;
;;
ELISP&gt; (car (last '(1 2 3 4 5)))
5
ELISP&gt;


;; Reverse a list
;;
ELISP&gt; (reverse '(1 2 3 4 5))
(5 4 3 2 1)


;; Append lists
;;
;; Note: nil also means an empty list
;;
ELISP&gt; (append '(1 2) '( "a" "b" "c" "d"))
(1 2 "a" "b" "c" "d")

ELISP&gt; (append '(1 2) nil '( "a" "b" "c" "d") nil)
(1 2 "a" "b" "c" "d")



;; Filter list elements given a predicate function
;;
;;
ELISP&gt; (remove-if-not (lambda (x) (&gt; x 2)) '(1 2 3 4 5 6 7 8 9 10))
(3 4 5 6 7 8 9 10)

;; Test if list is empty
;;
ELISP&gt; (null '(1 2 3 4 5))
nil
ELISP&gt; (null '())
t
ELISP&gt; (null nil)
t
ELISP&gt;

;; Drop the firsts n elements of a list
;;
;;
ELISP&gt; (nthcdr 2 '(1 2 3 4))
(3 4)

ELISP&gt; (nthcdr 3 '(1 2 3 4))
(4)

ELISP&gt; (nthcdr 13 '(1 2 3 4))
nil
ELISP&gt;

;; Delete an element of a list
;;
;;
ELISP&gt; (delq 1 '(1 2 3 4))
(2 3 4)


ELISP&gt; (delq 10 '(1 2 3 4))
(1 2 3 4)

;; It doesn't work to delete sublists
;;
ELISP&gt; (delq (5) '(1 2 (5) 3 4))
    ** Eval error **  Invalid function: 5
ELISP&gt; (delq '(5) '(1 2 (5) 3 4))
(1 2
   (5)
   3 4)

ELISP&gt; (delete '(5) '(1 2 (5) 3 4))
(1 2 3 4)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Convert Vector to List
;;
;;
ELISP&gt; (coerce [1 2 3] 'list)
(1 2 3)

;; Convert List to Vector
;;
ELISP&gt; (coerce '(1 2 3) 'vector)
[1 2 3]

ELISP&gt; (number-sequence 0 10 2)
(0 2 4 6 8 10)

ELISP&gt; (number-sequence 9 4 -1)
(9 8 7 6 5 4)


;; Modify list variables.
;;
ELISP&gt; alist
(a b c d e)

ELISP&gt; (push 'f alist)
(f a b c d e)

ELISP&gt; alist
(f a b c d e)

ELISP&gt; (pop alist)
f

ELISP&gt; alist
(a b c d e)

ELISP&gt; (pop alist)
a
ELISP&gt; alist
(b c d e)

ELISP&gt;
</pre>
</div>
</div>
<div id="outline-container-org160a9d7" class="outline-3">
<h3 id="org160a9d7"><span class="section-number-3">1.8</span> 关联列表和属性列表</h3>
<div class="outline-text-3" id="text-1-8">
</div>
<div id="outline-container-org5b6cef5" class="outline-4">
<h4 id="org5b6cef5"><span class="section-number-4">1.8.1</span> 概览</h4>
<div class="outline-text-4" id="text-1-8-1">
<p>
关联列表是一系列cons对，这里我可以称作 <code>clist</code> 或者 由两个元素组成的列表的集合，可以称为 <code>alist</code>
</p>

<p>
<b>关联列表类型：clist</b>
</p>

<p>
键: a, x, 2 and 4 值: b, y, 3 and (1 2 3 4 5)
</p>
<pre class="example">
ELISP&gt; '((a . b) (x . y) (2 . 3) (4 . (1 2 3 4 5)))
((a . b)
 (x . y)
 (2 . 3)
 (4 1 2 3 4 5)

ELISP&gt; (cons 'a 'b)
(a . b)

ELISP&gt; (cons 'a (cons 'b (cons 'c nil)))
(a b c)
</pre>

<p>
<b>关联列表类型：alist</b>
</p>
<pre class="example">
ELISP&gt; '((a  b) (x  y) (2  3) (4  (1 2 3 4 5)))
((a b)
 (x y)
 (2 3)
 (4
  (1 2 3 4 5)))

ELISP&gt; (list (list 'a 'b) (list 'x 'y) (list 2 3) (list 2 '(1 2 3 4 5)))
((a b)
 (x y)
 (2 3)
 (2
  (1 2 3 4 5)))
</pre>
<p>
<code>alist</code> 不像 <code>clist</code> 有歧义。
</p>

<p>
<b>属性列表：Plist</b>
</p>

<p>
属性列表是连续的键值对集合，它的优势是括号少和可读性高。
</p>
<pre class="example">
'(:key1 value1 :key2 value2 :key3 1002.23 :key4 (a b c d e))

ELISP&gt; '(:key1 value1 :key2 value2 :key3 1002.23 :key4 (a b c d e))
(:key1 value1 :key2 value2 :key3 1002.23 :key4
       (a b c d e))

;;; It is more useful in configuration files

(
:key1  value1
:key2  value2
:key3  value3
:key4  (a b c d e )
)
</pre>
</div>
</div>
<div id="outline-container-org540a6e8" class="outline-4">
<h4 id="org540a6e8"><span class="section-number-4">1.8.2</span> 关联列表/Alist</h4>
<div class="outline-text-4" id="text-1-8-2">
<pre class="example">
ELISP&gt; (setq dict
'((pine . cones)
 (oak . acorns)
 (maple . seeds)))
((pine . cones)
 (oak . acorns)
 (maple . seeds))

ELISP&gt; dict
((pine . cones)
 (oak . acorns)
 (maple . seeds))

;; Get a cell associated with a key
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ELISP&gt;
ELISP&gt; (assoc 'oak dict)
(oak . acorns)

ELISP&gt; (assoc 'wrong dict)
nil

;; Get a Key
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

ELISP&gt; (car (assoc 'oak dict))
oak
ELISP&gt; (cdr (assoc 'oak dict))
acorns
ELISP&gt;


ELISP&gt; (car (assoc 'oak dict))
oak
ELISP&gt;

;; Get all keys
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

ELISP&gt; (mapcar #'car dict)
(pine oak maple)

;; Get all values
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

ELISP&gt; (mapcar #'cdr dict)
(cones acorns seeds)
</pre>

<p>
例：过滤多个键
</p>
<pre class="example">
ELISP&gt; (defvar language-list
  '(
   ("io" . ((:command . "io")
             (:description . "Run IO Language script")))
    ("lua" . ((:command . "lua")
              (:description . "Run Lua script")))
    ("groovy" . ((:command . "groovy")
                 (:description . "Run Groovy")))
    ("scala" . ((:command . "scala")
                (:cmdopt . "-Dfile.encoding=UTF-8")
                (:description . "Run Scala file with scala command")))

    ("haml" . ((:command . "haml")
               (:exec    . "%c %o %s")
               (:description . "Convert HAML to HTML")))
    ("sass" . ((:command . "sass")
               (:exec    . "%c %o --no-cac")))
 ))
language-list


ELISP&gt; (assoc  "scala"  language-list )
("scala"
 (:command . "scala")
 (:cmdopt . "-Dfile.encoding=UTF-8")
 (:description . "Run Scala file with scala command"))

ELISP&gt; (assoc  "lua"  language-list )
("lua"
 (:command . "lua")
 (:description . "Run Lua script"))

ELISP&gt; (assoc  "wrong"  language-list )
nil

ELISP&gt; (assoc ':command (assoc  "scala"  language-list ))
(:command . "scala")

ELISP&gt; (cdr (assoc ':command (assoc  "scala"  language-list )))
"scala"
ELISP&gt;

ELISP&gt; (assoc ':description (assoc  "scala"  language-list ))
(:description . "Run Scala file with scala command")

ELISP&gt; (cdr (assoc ':description (assoc  "scala"  language-list )))
"Run Scala file with scala command"
ELISP&gt;

ELISP&gt; (mapcar 'car language-list)
("io" "lua" "groovy" "scala" "haml" "sass")

ELISP&gt; (mapcar 'cdr language-list)
(((:command . "io")
  (:description . "Run IO Language script"))
 ((:command . "lua")
  (:description . "Run Lua script"))
 ((:command . "groovy")
  (:description . "Run Groovy"))
 ((:command . "scala")
  (:cmdopt . "-Dfile.encoding=UTF-8")
  (:description . "Run Scala file with scala command"))
 ((:command . "haml")
  (:exec . "%c %o %s")
  (:description . "Convert HAML to HTML"))
 ((:command . "sass")
  (:exec . "%c %o --no-cac")))

ELISP&gt;

ELISP&gt; (mapcar (lambda (x) (
                             list
                             (car x)
                             (cdr x)
                             ))
                            language-list)
(("io"
  ((:command . "io")
   (:description . "Run IO Language script")))
 ("lua"
  ((:command . "lua")
   (:description . "Run Lua script")))
 ("groovy"
  ((:command . "groovy")
   (:description . "Run Groovy")))
 ("scala"
  ((:command . "scala")
   (:cmdopt . "-Dfile.encoding=UTF-8")
   (:description . "Run Scala file with scala command")))
 ("haml"
  ((:command . "haml")
   (:exec . "%c %o %s")
   (:description . "Convert HAML to HTML")))
 ("sass"
  ((:command . "sass")
   (:exec . "%c %o --no-cac"))))

ELISP&gt;

ELISP&gt; (mapcar (lambda (x) (
     list
     (car x)
     (assoc ':command       (cdr x))
     (assoc ':cmdopt        (cdr x))
     (assoc ':description   (cdr x))
     ))
    language-list)

(("io"
  (:command . "io")
  nil
  (:description . "Run IO Language script"))
 ("lua"
  (:command . "lua")
  nil
  (:description . "Run Lua script"))
 ("groovy"
  (:command . "groovy")
  nil
  (:description . "Run Groovy"))
 ("scala"
  (:command . "scala")
  (:cmdopt . "-Dfile.encoding=UTF-8")
  (:description . "Run Scala file with scala command"))
 ("haml"
  (:command . "haml")
  nil
  (:description . "Convert HAML to HTML"))
 ("sass"
  (:command . "sass")
  nil nil))

ELISP&gt;


ELISP&gt; (mapcar (lambda (x) (
         list
         (car x)
         (cdr (assoc ':command   (cdr x)))
         (cdr (assoc ':cmdopt       (cdr x)))
         (cdr (assoc ':description   (cdr x)))
         ))

        language-list)
(("io" "io" nil "Run IO Language script")
 ("lua" "lua" nil "Run Lua script")
 ("groovy" "groovy" nil "Run Groovy")
 ("scala" "scala" "-Dfile.encoding=UTF-8" "Run Scala file with scala command")
 ("haml" "haml" nil "Convert HAML to HTML")
 ("sass" "sass" nil nil))

ELISP&gt;

ELISP&gt; (defun get-value (alist key) (cdr (assoc key alist)))
get-value
ELISP&gt; (get-value language-list "scala")
((:command . "scala")
 (:cmdopt . "-Dfile.encoding=UTF-8")
 (:description . "Run Scala file with scala command"))

ELISP&gt; (get-value language-list "lua")
((:command . "lua")
 (:description . "Run Lua script"))

ELISP&gt;
ELISP&gt; (get-value language-list "0")
nil
ELISP&gt;


ELISP&gt; (defun get-key-value (alist key field)
                (cdr (assoc  field  (cdr (assoc key alist))  )))
get-key-value
ELISP&gt;
ELISP&gt; (get-key-value language-list "scala" ':description)
"Run Scala file with scala command"
ELISP&gt;

ELISP&gt; (get-key-value language-list "scala" ':command)
"scala"
ELISP&gt;
</pre>
</div>
</div>
<div id="outline-container-org8c07df8" class="outline-4">
<h4 id="org8c07df8"><span class="section-number-4">1.8.3</span> 属性列表</h4>
<div class="outline-text-4" id="text-1-8-3">
<pre class="example">
ELISP&gt; (defvar plst (list :buffer (current-buffer) :line 10 :pos 2000))
plst

ELISP&gt;
ELISP&gt; (plist-get plst :line)
10

ELISP&gt; (plist-get plst :pos)
2000

ELISP&gt; (plist-get plst :buffer)
#&lt;buffer *ielm*&gt;
ELISP&gt;

ELISP&gt;
ELISP&gt; (plist-get plst :buffdfds)
nil
ELISP&gt;

ELISP&gt; (plist-member plst :buffer)
(:buffer #&lt;buffer *ielm*&gt; :line 10 :pos 2000)

ELISP&gt; (plist-member plst :bufferasd)
nil
ELISP&gt;

ELISP&gt; (plist-put plst :winconf (current-window-configuration))
(:buffer #&lt;buffer *ielm*&gt; :line 10 :pos 2000 :winconf #&lt;window-configuration&gt;)

ELISP&gt; plst
(:buffer #&lt;buffer *ielm*&gt; :line 10 :pos 2000 :winconf #&lt;window-configuration&gt;)

ELISP&gt;
</pre>
</div>
</div>
<div id="outline-container-org82cc9d4" class="outline-4">
<h4 id="org82cc9d4"><span class="section-number-4">1.8.4</span> 转换Alist成Plist和vice-versa</h4>
<div class="outline-text-4" id="text-1-8-4">
<pre class="example">
;; Alist to plist
(defun plist-&gt;alist (plist)
  (if (null plist)
      '()
      (cons
       (list (car plist) (cadr plist))
       (plist-&gt;alist (cddr plist)))))

ELISP&gt; (plist-&gt;alist (list :x 10 :y 20 :name "point"))
((:x 10)
 (:y 20)
 (:name "point"))

;;; Converts association list to plist
(defun alist-&gt;plist (assocl)
  (if (null assocl)
      '()
    (let
    ((hd (car assocl))
     (tl (cdr assocl)))
      (cons (car hd)
        (cons (cadr hd)
          (alist-&gt;plist tl))))))

;;; Converts plist to clist (List of cons pairs)
(defun plist-&gt;clist (plist)
  (if (null plist)
      '()
      (cons
       (cons (car plist) (cadr plist))
      (plist-&gt;clist (cddr plist)))))

ELISP&gt; (plist-&gt;clist (list :x 10 :y 20 :name "point"))
((:x . 10)
 (:y . 20)
 (:name . "point"))

;; Separates a property list into two lists of keys and values.
;;
(defun plist-&gt;kv (plist)
  (let ((alist (plist-&gt;alist plist)))
    (cons
     (mapcar #'car alist)
     (mapcar #'cdr alist))))

ELISP&gt; (setq al (plist-&gt;alist (list :x 10 :y 20 :name "point")))
((:x 10)
 (:y 20)
 (:name "point"))

ELISP&gt; (alist-&gt;plist al)
(:x 10 :y 20 :name "point")

ELISP&gt;

(setq keylist
    '("M-i"  'previous-line
      "M-j"  'backward-char
      "M-k"  'next-line
      "M-l"  'forward-char))


ELISP&gt; (setq kv (plist-&gt;kv keylist))
(("M-i" "M-j" "M-k" "M-l")
 ('previous-line)
 ('backward-char)
 ('next-line)
 ('forward-char))

ELISP&gt; (car kv)
("M-i" "M-j" "M-k" "M-l")

ELISP&gt; (cdr kv)
(('previous-line)
 ('backward-char)
 ('next-line)
 ('forward-char))

ELISP&gt;
</pre>
</div>
</div>
</div>
<div id="outline-container-org8d28447" class="outline-3">
<h3 id="org8d28447"><span class="section-number-3">1.9</span> 字符串</h3>
<div class="outline-text-3" id="text-1-9">
<pre class="example">
;; Split String

ELISP&gt; (split-string "  two words ")
("two" "words")

ELISP&gt;

ELISP&gt; (split-string "o\no\no" "\n" t)
("o" "o" "o")

ELISP&gt; (split-string "Soup is good food" "o*" t)
("S" "u" "p" " " "i" "s" " " "g" "d" " " "f" "d")

ELISP&gt;

;; Format String

ELISP&gt; (format-time-string "%Y/%m/%d %H:%M:%S" (current-time))
"2015/06/26 06:10:04"
ELISP&gt;
ELISP&gt;


;; Concatenate Strings

ELISP&gt; (concat "The " "quick brown " "fox.")
"The quick brown fox."
ELISP&gt;

ELISP&gt; (mapconcat 'identity '("aaa" "bbb" "ccc") ",")
"aaa,bbb,ccc"
ELISP&gt; (split-string "aaa,bbb,ccc" ",")
ELISP&gt; (split-string "aaa,bbb,ccc" ",")
("aaa" "bbb" "ccc")

;; String Width

ELISP&gt; (string-width "hello world")
11
ELISP&gt;
ELISP&gt; (substring "Freedom Land" 0 5)
"Freed"
ELISP&gt;
ELISP&gt; (string-match "ce" "central park")
0
ELISP&gt; (string-match "gt" "central park")
nil
ELISP&gt;


;;;;; Misc

ELISP&gt; (make-string 5 ?x)
"xxxxx"
ELISP&gt; (make-string 5 ?a)
"aaaaa"
ELISP&gt; (make-string 5 ?r)
"rrrrr"
ELISP&gt; (make-string 15 ?r)
"rrrrrrrrrrrrrrr"
ELISP&gt;
</pre>

<p>
<b>elisp符号/字符串转换</b>
</p>
<pre class="example">
; Convert a symbol to string
ELISP&gt; (symbol-name 'wombat)
"wombat"

; Convert a String to Symbol
ELISP&gt; (intern "wombat")
wombat
</pre>

<p>
<b>读取字符串中的S表达式</b>
</p>
<pre class="example">
ELISP&gt; (read-from-string
            "(
               (POINT1  (X  10.2323)  (Y   20.2323))
               (POINT2  (x  0.2)          (Y 923.23))
               (POINT3  (x -10.5)       (Y 78,23))
             )")
(((POINT1
   (X 10.2323)
   (Y 20.2323))
  (POINT2
   (x 0.2)
   (Y 923.23))
  (POINT3
   (x -10.5)
   (Y 78
      (\, 23))))
 . 174)

ELISP&gt;
</pre>
</div>
</div>
<div id="outline-container-orgd8aaec4" class="outline-3">
<h3 id="orgd8aaec4"><span class="section-number-3">1.10</span> 符号</h3>
<div class="outline-text-3" id="text-1-10">
<pre class="example">
;;; Convert a string to symbol

ELISP&gt; (intern "a-symbol")
a-synmbol
ELISP&gt; (symbolp (intern "a-symbol"))
t
ELISP&gt;

;;; Convert a symbol to a string

ELISP&gt; (symbol-name 'symbol)
"symbol"
ELISP&gt;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

ELISP&gt; (setq sym '(1 2 3 4 5))
(1 2 3 4 5)

ELISP&gt; sym
(1 2 3 4 5)

;;; Test if variable is defined
ELISP&gt; (boundp 'sym)
t
ELISP&gt;

;;; Test if variable sym is a symbol
ELISP&gt; (symbolp sym)
nil

;;; Test if the symbol sym is a symbol
ELISP&gt; (symbolp 'sym)
t
ELISP&gt;

;; Get symbol as string
;;
ELISP&gt; (symbol-name 'sym)
"sym"

;; Get value from a symbol
;;
ELISP&gt; (symbol-value 'sym)
(1 2 3 4 5)

ELISP&gt; (symbol-function 'sym)
nil

ELISP&gt; (symbol-plist 'sym)
nil

;;-------------------------;;

ELISP&gt; (defun func (x y) (+ (* 3 x) (* 4 y)))
func

ELISP&gt; (func 10 2)
38
ELISP&gt;

;;; Check if function is defined
;;
ELISP&gt; (fboundp 'func)
t
ELISP&gt; (fboundp 'sym)
nil
ELISP&gt;


ELISP&gt; (symbol-name 'func)
"func"

ELISP&gt; (symbol-value 'func)
    ** Eval error **  Symbol's value as variable is void: func
ELISP&gt; (symbol-function 'func)
(lambda
  (x y)
  (+
   (* 3 x)
   (* 4 y)))

ELISP&gt; (symbol-plist 'func)
nil
ELISP&gt;

;;; Function Source Code

ELISP&gt; (symbol-function #'func)
(lambda
  (x y)
  (+
   (* 3 x)
   (* 4 y)))


;; Test if function is an elisp primitive

ELISP&gt; (subrp (symbol-function 'goto-char))
t
ELISP&gt;
</pre>
</div>
</div>
<div id="outline-container-orgd9ba9c3" class="outline-3">
<h3 id="orgd9ba9c3"><span class="section-number-3">1.11</span> 类型转换</h3>
<div class="outline-text-3" id="text-1-11">
<p>
<b>类型查询</b>
</p>
<pre class="example">
ELISP&gt; (type-of 1000)
integer

ELISP&gt; (type-of 1000.3434)
float
ELISP&gt;

ELISP&gt; (type-of "lisp")
string

ELISP&gt; (type-of '(1 2 3 4 5))
cons
ELISP&gt; (type-of (list 'cos 'sin 1 2 3 4 5))
cons
ELISP&gt;

ELISP&gt; (type-of [1 2 3 4])
vector

ELISP&gt; (type-of 'elisp-mode-map)
symbol
ELISP&gt;

ELISP&gt; (type-of #'cos)
symbol
ELISP&gt;
</pre>

<p>
<b>类型判断</b>
</p>
<pre class="example">
;; Test if it is a number
;;-----------------------------------

ELISP&gt; (numberp 1000)
t
ELISP&gt; (numberp 10e4)
t
ELISP&gt; (numberp '(1 2 3 4))
nil
ELISP&gt; (numberp "hello world")
nil
ELISP&gt;


;; Test if it is a string
;;-----------------------------------

ELISP&gt; (stringp "Emacs")
t
ELISP&gt; (stringp '(1 2 3 4))
nil
ELISP&gt;

;; Test if ti is a symbol
;;------------------------------------
ELISP&gt; (symbolp 'emacs)
t
ELISP&gt; (symbolp #'emacs)
t
ELISP&gt; (symbolp "something")
nil
ELISP&gt; (symbolp 10000)
nil
ELISP&gt;


;; Test if it is a list
;;-----------------------------------

ELISP&gt; (listp '(1 2 3 4))
t
ELISP&gt; (listp [1 2 3 4])
nil
ELISP&gt; (listp "hello world")
nil
ELISP&gt;


;; Test if it is a vector
;;-----------------------------------

ELISP&gt; (vectorp ["Lisp" "Emacs" "Scheme" "Clojure"])
t
ELISP&gt;
ELISP&gt; (vectorp '(1 2 3))
nil
ELISP&gt; (vectorp "lisp")
nil
ELISP&gt;
</pre>

<p>
<b>数字/字符串转换</b>
</p>
<pre class="example">
ELISP&gt;
ELISP&gt; (number-to-string 1000)
"1000"

ELISP&gt; (string-to-number "200")
200
ELISP&gt;
ELISP&gt;
</pre>

<p>
<b>符号/字符串转换</b>
</p>
<pre class="example">
ELISP&gt; (symbol-name 'my-symbol)
"my-symbol"

ELISP&gt; (symbol-name :my-symbol)
":my-symbol"
ELISP&gt;

ELISP&gt; (intern "some-symbol")
some-symbol
</pre>

<p>
<b>S表达式/字符串转换</b>
</p>
<ul class="org-ul">
<li>read: 解析S表达式</li>
</ul>
<pre class="example">
ELISP&gt;
ELISP&gt; (setq raw "(:x 10 :y 20 :z 30 :w \"hello world\")")
"(:x 10 :y 20 :z 30 :w \"hello world\")"
ELISP&gt;
ELISP&gt; (read raw)
(:x 10 :y 20 :z 30 :w "hello world")

ELISP&gt; (plist-get (read raw) :x)
10
ELISP&gt; (plist-get (read raw) :w)
"hello world"
ELISP&gt;
</pre>

<ul class="org-ul">
<li>prin1-to-string: 序列化S表达式</li>
</ul>
<pre class="example">
ELISP&gt; (setq sexp '(:x 10 :y 20 :z 30 :w "hello world"))
(:x 10 :y 20 :z 30 :w "hello world")

ELISP&gt; sexp
(:x 10 :y 20 :z 30 :w "hello world")

ELISP&gt; (prin1-to-string sexp)
"(:x 10 :y 20 :z 30 :w \"hello world\")"
ELISP&gt;
</pre>
</div>
</div>
<div id="outline-container-org18d3852" class="outline-3">
<h3 id="org18d3852"><span class="section-number-3">1.12</span> 求值</h3>
<div class="outline-text-3" id="text-1-12">
<p>
<b>S表达式求值</b>
</p>
<pre class="example">
ELISP&gt; (eval '(+ 1 2 3 4 5))
15
ELISP&gt;


ELISP&gt; '(defun func1(x)(* 10 x))
(defun func1
    (x)
  (* 10 x))

ELISP&gt;

ELISP&gt; '((+ 1 3) (* 4 5) (- 8 9))
((+ 1 3)
 (* 4 5)
 (- 8 9))

ELISP&gt; (eval '(defun func1(x)(* 10 x)))
func1
ELISP&gt; (func1 5)
50
ELISP&gt;


ELISP&gt; (mapcar 'eval '((+ 1 3) (* 4 5) (- 8 9)))
(4 20 -1)
</pre>

<p>
<b>字符串求值</b>
</p>
<pre class="example">
ELISP&gt; (defun eval-string (str) (eval (read str)))
eval-string

ELISP&gt; (eval-string "(+ 1 2 3 4 5 6)")
21
ELISP&gt;

ELISP&gt; (eval-string "(defun func2(x)(* 10 x)))")
func2
ELISP&gt; (func2 6)
60
ELISP&gt;
</pre>

<p>
<b>S表达式格式化为字符串</b>
</p>
<pre class="example">
ELISP&gt; (setq sexp1 '(+ 1 (* 2 3)))
(+ 1
   (* 2 3))

ELISP&gt; (eval sexp1)
7

ELISP&gt; (format "%S" sexp1)
"(+ 1 (* 2 3))"
ELISP&gt;
</pre>

<p>
<b>Elisp中的求值命令</b>
</p>
<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">命令</th>
<th scope="col" class="org-left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">M-x eval-defun</td>
<td class="org-left">函数求值</td>
</tr>

<tr>
<td class="org-left">M-x eval-region</td>
<td class="org-left">区域内表达式求值</td>
</tr>

<tr>
<td class="org-left">M-x eval-buffer</td>
<td class="org-left">buffer内表达式求值</td>
</tr>

<tr>
<td class="org-left">M-x eval-expression</td>
<td class="org-left">输入框输入求值</td>
</tr>

<tr>
<td class="org-left">M-x load-file</td>
<td class="org-left">文件加载</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-org17d79a1" class="outline-3">
<h3 id="org17d79a1"><span class="section-number-3">1.13</span> Defalias</h3>
<div class="outline-text-3" id="text-1-13">
<p>
内置宏 <code>defalias</code> 可以为emaca函数定义简短的名字。
</p>

<p>
参考：<a href="http://ergoemacs.org/emacs/emacs_alias.html">Emacs: Use Alias for Fast M-x</a>
</p>

<pre class="example">
ELISP&gt; (require 'cl)
cl
ELISP&gt;

ELISP&gt; (defalias 'map 'mapcar)
map
ELISP&gt; (map (lambda (x) (* 3 x)) (list 1 2 3 4 5 6))
(3 6 9 12 15 18)

ELISP&gt; (defalias 'filter 'remove-if-not) ;; remove-if-not comes from "cl" library
filter

;;; Filter all buffers bounded to a file
;;
ELISP&gt; (filter #'buffer-file-name (buffer-list))
(#&lt;buffer README.org&gt; #&lt;buffer Projects.wiki.org&gt; #&lt;buffer Index.wiki.org&gt; #&lt;buffer settings.org&gt; #&lt;buffer project.org&gt;)

;;; Reject all buffers which are not bounded to a file
ELISP&gt; (reject #'buffer-file-name (buffer-list))
(#&lt;buffer *ielm*&gt; #&lt;buffer *Help*&gt; #&lt;buffer  *Minibuf-1*&gt; #&lt;buffer emacs&gt; #&lt;buffer *scratch*&gt; ..)

;;; The command M-x org-html-export-to-htm will export this document (README.org) to html
;;  the command M-x org2html will do so too.
;;
(defalias #'org2html #'org-html-export-to-html)

;;
;;  It is also useful to create more convenient names for Emacs API
;; in a namsepace-like fashion that makes easier to find functions and
;; autocomplete functions, for instance:
;;
(defalias 'file/extension         'file-name-extension)
(defalias 'file/extension-sans    'file-name-sans-extension)
(defalias 'file/path-expand       'expand-file-name)
(defalias 'file/filename          'file-name-nondirectory)
(defalias 'file/path-relative     'file-relative-name)
(defalias 'file/rename            'rename-file)
(defalias 'file/delete            'delete-file)
(defalias 'file/copy              'copy-file)

;;; To find the documentation of a function group defined in this fashion
;; Enter M-x apropos  and then type file/
(apropos "file/")

ELISP&gt; (set-buffer "README.org")
#&lt;buffer README.org&gt;
ELISP&gt; (buffer-file-name)
"/home/tux/PycharmProjects/emacs/README.org"
ELISP&gt; (file/basename (buffer-file-name))
"README"
ELISP&gt; (file/extension (buffer-file-name))
"org"
ELISP&gt; (file/filename (buffer-file-name))
"README.org"
ELISP&gt;
</pre>
</div>
</div>
<div id="outline-container-org7e3ac16" class="outline-3">
<h3 id="org7e3ac16"><span class="section-number-3">1.14</span> 控制结构</h3>
<div class="outline-text-3" id="text-1-14">
</div>
<div id="outline-container-org5cf5ab2" class="outline-4">
<h4 id="org5cf5ab2"><span class="section-number-4">1.14.1</span> Conditional Statement</h4>
<div class="outline-text-4" id="text-1-14-1">
<p>
<b>If Else 语句</b>
</p>
<pre class="example">
;;
;; Any value different from nil or '() is true, otherwise false.
;;

;; True
;;
ELISP&gt; (if t 5 6)
5

ELISP&gt; (if 10 5 6)
5

ELISP&gt; (if 0 5 6)
5

;; False
ELISP&gt; (if nil 5 6)
6

ELISP&gt; (if '() 5 6)
6


;; Inverting Predicate
;;
ELISP&gt; (if (not t) 5 6)
6

ELISP&gt; (if (not nil) 5 6)
5


ELISP&gt; (if (&lt; 5 10)  (message "less than 10") (message "greater or equal to 10") )
"less than 10"

ELISP&gt; (if (&lt; 30 10)  (message "less than 10") (message "greater or equal to 10") )
"greater or equal to 10"
ELISP&gt;

;;; If else with multiple statements

ELISP&gt; (setq x 10)
10

ELISP&gt; (if (&gt; x 5)
       ;; Then Statement
       (progn

         (message "Positive Number")
         (print "Greater than five")
         (split-window-vertically)
         78 ;;  Return Value
        )
     ;; Else Statement
     (progn
       (print "Less than five")
       (split-window-horizontally)
       12 ;;  Return Value
     ))

"Greater than five"

78
ELISP&gt;
</pre>

<p>
<b>When语句</b>
</p>
<pre class="example">
ELISP&gt; (when t 3)
3

ELISP&gt; (when nil 3)
nil


ELISP&gt; (setq x 5)
5

ELISP&gt; (when (&gt; x 3)
         (message "Less than 3"))
"Less than 3"
ELISP&gt;

ELISP&gt; (setq x 1)
1

ELISP&gt; (when (&gt; x 3)
         (message "Less than 3"))
nil
ELISP&gt;


;;;;; When with Multiple Statements

ELISP&gt; (setq x 10)
10

ELISP&gt; (when (&gt; x 7)
     (progn
       (message "Greater than 7 OK.")
       (message "Print message 2")
       (split-window-horizontally)
      ))

 #&lt;window 8 on *ielm*&gt;
ELISP&gt;
</pre>
</div>
</div>
<div id="outline-container-orga03bd99" class="outline-4">
<h4 id="orga03bd99"><span class="section-number-4">1.14.2</span> Cond - Case Switch</h4>
<div class="outline-text-4" id="text-1-14-2">
<pre class="example">
ELISP&gt; (setq a 3)       ;; a = 3
3
ELISP&gt;

ELISP&gt; (cond
        ((evenp a) a)       ;; if   (a % 2 == 0)    ==&gt; a
        ((&gt; a 7) (/ a 2))   ;; elif (a &gt; 7)         ==&gt; a/2
        ((&lt; a 5) (- a 1))   ;; elif (a &lt; 5)         ==&gt; a-1
        (t 7)               ;; else                 ==&gt; 7
        )
2
ELISP&gt;
</pre>
</div>
</div>

<div id="outline-container-org0b48d9d" class="outline-4">
<h4 id="org0b48d9d"><span class="section-number-4">1.14.3</span> CL-Case - Case Switch</h4>
<div class="outline-text-4" id="text-1-14-3">
<pre class="example">
(defun test-cl-case (operation x y)
  (cl-case operation
    (:mul (* x y))
    (:add (+ x y))
    (:sub (- x y))
    (:div (/ x y))
    (otherwise nil)))

ELISP&gt; (test-cl-case :mul 2 10)
20

ELISP&gt; (test-cl-case :sub 10 2)
8

ELISP&gt; (test-cl-case :add 10 2)
12
ELISP&gt; (test-cl-case :div 10 2)
5

ELISP&gt; (test-cl-case 'dummy 20 10)
nil
</pre>
</div>
</div>

<div id="outline-container-orgaa1a91d" class="outline-4">
<h4 id="orgaa1a91d"><span class="section-number-4">1.14.4</span> 循环</h4>
<div class="outline-text-4" id="text-1-14-4">
<p>
<b>Dolist</b>
</p>
<pre class="example">
ELISP&gt; (dolist (h '(a b c)) (print h))

a

b

c

nil

ELISP&gt; (dolist (x '(1 2 3)) (print (* 2 x)))

2

4

6

nil
ELISP&gt;

ELISP&gt; (dolist (x '(1 2 3))
         (dolist (y '(a b))
            (print (list x y))))
(1 a)

(1 b)

(2 a)

(2 b)

(3 a)

(3 b)

nil
ELISP&gt;
</pre>

<p>
<b>Dotimes</b>
</p>
<pre class="example">
ELISP&gt; (dotimes (i 3) (print i))

0

1

2

nil
ELISP

ELISP&gt; (dotimes (i 3) (print (* 2 i)))

0

2

4

nil
ELISP&gt;
</pre>

<p>
<b>Loop</b>
</p>

<p>
最好使用 <code>map</code> 和 <code>filter</code> 代替 <code>loops</code> , 详见 Functional Programming
</p>

<pre class="example">
ELISP&gt; (setq a 4)
4

ELISP&gt; (loop
        (setq a (+ a 1))
        (when (&gt; a 7) (return a)))
8

ELISP&gt; a
8
ELISP&gt;

ELISP&gt; (loop
   (setq a (- a 1))
   (when (&lt; a 3) (return)))
nil
ELISP&gt; a
2
ELISP&gt;
</pre>

<p>
<b>Loop Collecting / Summing / For</b>
</p>
<pre class="example">
ELISP&gt; (loop for i from 1 to 10 collecting i)
(1 2 3 4 5 6 7 8 9 10)

ELISP&gt; (loop for i from 1 to 10 collecting (* 3 i))
(3 6 9 12 15 18 21 24 27 30)

ELISP&gt; (loop for x from 1 to 10 summing (expt x 2))
385

ELISP&gt; (loop for x from 1 to 10 collecting (* 2 x))
(2 4 6 8 10 12 14 16 18 20)

ELISP&gt; (loop for x from 1 to 10 summing (* 2 x))
110
ELISP&gt;

ELISP&gt; (apply #'+ '(2 4 6 8 10 12 14 16 18 20))
110

ELISP&gt; (loop for i below 10 collecting i)
(0 1 2 3 4 5 6 7 8 9)

ELISP&gt;  (loop for x in '(1 2 3)
      do (print x) )

1

2

3

nil

(loop
       for x in '(a b c)
       for y in '(1 2 3 4 5 6)
       collect (list x y))
((a 1)
 (b 2)
 (c 3))

ELISP&gt; (loop for (a b) in '((x 1) (y 2) (z 3))
      collect (list b a))
((1 x)
 (2 y)
 (3 z))

ELISP&gt; (loop for i upto 20
      if (oddp i)
        collect i into odds
      else
        collect i into evens
      finally (return (values evens odds)))
((0 2 4 6 8 10 12 14 16 18 20)
 (1 3 5 7 9 11 13 15 17 19))
</pre>

<p>
<b>Do Loop</b>
</p>
<pre class="example">
(do (variable-definition*)
    (end-test-form result-form*)
  statement*)
</pre>

<pre class="example">
(do
   ;; Variables Definitions
   ((i 0 (1+ i)))

   ;; Test form
    ((&gt;= i 4))

  ;; Statement form
  (print i))

0

1

2

3
nil

;; Fibbonaci Computing Loop
;;
(do ((n 0 (1+ n))
     (cur 0 next)
     (next 1 (+ cur next)))
    ((= 10 n) cur))
55
</pre>
</div>
</div>

<div id="outline-container-org547e7a9" class="outline-4">
<h4 id="org547e7a9"><span class="section-number-4">1.14.5</span> 函数式编程</h4>
<div class="outline-text-4" id="text-1-14-5">
<p>
<a href="https://github.com/magnars/dash.el.git">Dash</a> 是emacs经常使用的函数式编程库。
</p>

<ul class="org-ul">
<li>Map and Filter</li>
</ul>

<p>
<b>Mapcar / Equivalent to map</b>
</p>
<pre class="example">
ELISP&gt; (defun my-fun (x) (* x 10))
my-fun
ELISP&gt;

ELISP&gt; (mapcar 'my-fun '(1 2 3 5 6))
(10 20 30 50 60)

ELISP&gt; (mapcar 'capitalize '("hello" "world" "emacs"))
("Hello" "World" "Emacs")

;;  Anonymous Functions
;;
ELISP&gt; (mapcar (lambda (x) (* x x))   '(1 2 3 4 5 6))
(1 4 9 16 25 36)


ELISP&gt; (setq anon (lambda (x) (* x x)))
(lambda
  (x)
  (* x x))

ELISP&gt; (mapcar anon '(1 2 3 4 5 6))
(1 4 9 16 25 36)
</pre>

<p>
<b>Filter</b>
</p>
<pre class="example">
ELISP&gt; (null nil)
t
ELISP&gt; (null 23)
nil
ELISP&gt;

;; Equivalent to  Haskell idiom:
;;
;; &gt; filter predicate list
;;
ELISP&gt; (remove-if-not 'null '(1 2 3 nil 5 6 nil nil ))
(nil nil nil)

;; Equivalent to Haskell idiom:
;;
;;   &gt; filter (\x -&gt; not (predicate x)) list
;;
;; a more apropriate name would be reject
;;
ELISP&gt; (remove-if 'null '(1 2 3 nil 5 6 nil nil ))
(1 2 3 5 6)



ELISP&gt; (defun range (step start stop)
  (if (&gt; start stop)
      nil
      (cons start (range step (+ step start) stop))

  );; End If
);; End range

ELISP&gt; (range 1 0 10)
(0 1 2 3 4 5 6 7 8 9 10)

ELISP&gt; (range 2 0 20)
(0 2 4 6 8 10 12 14 16 18 20)


ELISP&gt; (remove-if (lambda (x) (= (% x 2) 0)) (range 1 0 20))
(1 3 5 7 9 11 13 15 17 19)

ELISP&gt; (remove-if-not (lambda (x) (= (% x 2) 0)) (range 1 0 20))
(0 2 4 6 8 10 12 14 16 18 20)


ELISP&gt; (remove-if (lambda (x) (= (% x 3) 0)) (range 1 0 20))
(1 2 4 5 7 8 10 11 13 14 16 17 19 20)

ELISP&gt; (remove-if-not (lambda (x) (= (% x 3) 0)) (range 1 0 20))
(0 3 6 9 12 15 18)

ELISP&gt;
</pre>

<ul class="org-ul">
<li>匿名函数/lambda函数</li>
</ul>
<pre class="example">
ELISP&gt; (lambda (x)(* x 10))
(lambda
  (x)
  (* x 10))

ELISP&gt;

ELISP&gt; (funcall (lambda (x)(* x 10)) 5)
50
ELISP&gt;

ELISP&gt; (setq my-lambda (lambda (x) (+ (* x 10) 5))) ;; 10 * x + 5
(lambda
  (x)
  (+
   (* x 10)
   5))

ELISP&gt; (funcall my-lambda 10)
105
ELISP&gt; (mapcar my-lambda '(1 2 3 4 5))
(15 25 35 45 55)


ELISP&gt;  (setq double (function (lambda (x) (+ x x)) ))
(lambda
  (x)
  (+ x x))

ELISP&gt; (funcall double 22)
44
ELISP&gt;


;;
;; Apply a function to a list of arguments
;;
;;;;;;;;;;;

ELISP&gt; (apply #'+ '(1 2 3 4 5))
15
ELISP&gt;

ELISP&gt;
ELISP&gt; (defun f (x y z) (+ (* 10 x) (* -4 y) (* 5 z)))
f
ELISP&gt; (f 2 3 5)
33

ELISP&gt; (apply 'f '(2 3 5))
33


ELISP&gt; (mapcar (lambda (x) (apply 'f x)) '( (2 3 5) (4 5 6) (8 9 5)))
(33 50 69)



;; Create Higher Order Functions
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
</pre>

<ul class="org-ul">
<li>Function Composition ????</li>
</ul>
<pre class="example">
ELISP&gt; ;; ID: f0c736a9-afec-3e3f-455c-40997023e130
(defun compose (&amp;rest funs)
  "Return function composed of FUNS."
  (lexical-let ((lex-funs funs))
    (lambda (&amp;rest args)
      (reduce 'funcall (butlast lex-funs)
              :from-end t
              :initial-value (apply (car (last lex-funs)) args)))))
              compose

ELISP&gt; (funcall (compose 'prin1-to-string 'random* 'exp) 10)
"4757.245739507558"
ELISP&gt;
</pre>

<ul class="org-ul">
<li>Interactive Functions</li>
</ul>
<pre class="example">
(defun some-interactive-function ()
   "Documentation"
  (interactive)
  ...)
</pre>

<ul class="org-ul">
<li>List Recursive Functions</li>
</ul>
<p>
<b>Map</b>
</p>
<pre class="example">
(defun map (fun xs)
  (if (null xs)
      '()
    (cons (funcall fun (car xs))
      (map fun (cdr xs)))))

ELISP&gt; (map #'buffer-name (buffer-list))
("*ielm*" "*scratch*" " *Minibuf-1*" "*Backtrace*" "*eshell*" "sclj.import.scm" "*Messages*" "*GNU Emacs*" " *Minibuf-0*" " *code-conversion-work*" " *Echo Area 0*" " *Echo Area 1*" "*Shell Command Output*" "*Completions*")

ELISP&gt;
</pre>

<p>
<b>Filter</b>
</p>
<pre class="example">
(defun filter (fun xs)
  (if (null xs)
      '()
    (let ((hd (car xs))
      (tl (cdr xs)))
      (if (funcall fun hd)
      (cons hd (filter fun tl))
    (filter fun tl)))))

(defun odd? (x) (zerop (% x 2)))

ELISP&gt; (filter #'odd? '(1 2 3 4 5 6))
(2 4 6)
</pre>
</div>
</div>
</div>
</div>
<div class="taglist"><a href="https://blog.geekinney.com/tags.html">Tags</a>: <a href="https://blog.geekinney.com/tag-emacs.html">emacs</a> <a href="https://blog.geekinney.com/tag-elisp.html">elisp</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[elisp]]></category>
  <link>https://blog.geekinney.com/2019-11-12-emacs-lisp-learning-note.html</link>
  <pubDate>Fri, 22 Nov 2019 17:18:23 +0800</pubDate>
</item>
<item>
  <title><![CDATA[搞定I：无压生活的艺术]]></title>
  <description><![CDATA[
<nav id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org8199a17">1. 序言</a></li>
<li><a href="#org65de4fa">2. PART1 搞定：通向从容之路</a>
<ul>
<li><a href="#org7b7ddd6">2.1. 第一章 新情况，新做法</a></li>
</ul>
</li>
</ul>
</div>
</nav>
<p>
<b>《搞定I：无压工作的艺术》/ [美] David.Allen 著 / 张静 译 / 开始阅读：Oct 18, 2019</b>
</p>
<div id="outline-container-org8199a17" class="outline-2">
<h2 id="org8199a17"><span class="section-number-2">1</span> 序言</h2>
<div class="outline-text-2" id="text-1">
<p>
○ 对大多数人来说，宽容错误的增量方法在大多数情况下更有可能获得长期回报。因此，即使你忘掉或者推迟处理某项内容，你也没有必要全面放弃。
</p>

<p>
○ 我又一些坚定书籍的方法，其中两个是：我能不能在一两个月后还记得它的内容，以及它是否影响了我的世界观。
</p>

<p>
○ 值得实现的一切生活目标都需要付诸实践。事实上，生活本身就是一个长期事件的过程，是完善我们行动的持续努力。一旦掌握了适当的实践技术，新的学习任务就会变成一种充满快乐与安宁的无压力体验，一个安排你所有生活内容、促进正确看待生活难题的过程。 —— 托马斯.斯特纳
</p>

<p>
○ 任何值得存在的，也值得被认识，因为认识是存在的反映；而细微的和宏大的事物并肩存在。 —— 弗朗西斯.培根
</p>

<p>
○ 放松精神的技巧，原理烦恼与忧虑的能力，很可能是伟人成功的秘诀之一。 —— J.A.哈特菲尔德
</p>

<p>
○ 本书总共分为三个部分。第一部分扼要的介绍这个系统，解释了其独特性和及时性，并简要介绍了这套方法的具体内容。第二部分介绍了如何实践这套方法。本书就像你的私人顾问，可以指导你循序渐进的运用这些行为模式。第三部分则展开了更加深刻的讨论，描述了当你把这些方法和模式应用到你的工作和生活中后，所产生的形式更加微妙、意义更加深远的诸多影响。
</p>
</div>
</div>

<div id="outline-container-org65de4fa" class="outline-2">
<h2 id="org65de4fa"><span class="section-number-2">2</span> PART1 搞定：通向从容之路</h2>
<div class="outline-text-2" id="text-2">
</div>
<div id="outline-container-org7b7ddd6" class="outline-3">
<h3 id="org7b7ddd6"><span class="section-number-3">2.1</span> 第一章 新情况，新做法</h3>
<div class="outline-text-3" id="text-2-1">
<p>
○ 本书中的这套方法，完全基于三个主要目的：
</p>

<ul class="org-ul">
<li>收集所有需要处理或者对你有用的事情（现在的、以后的、某一时间的；大的、小的、不大不小的），把它们统统置于一个脱离大脑意识的、条理分明的、可靠的系统中；</li>

<li>指导自己在获取任何“输入信息”（也就是接手任何任务）的前期就进行分析和决策，以确保随时拥有一套可以执行或重新协调的“下一步行动”可行清单；</li>
<li>管理、协调所有相关内容，履行你在任何时间点对自己和他人作出的承诺。</li>
</ul>
</div>
</div>
</div>
<div class="taglist"><a href="https://blog.geekinney.com/tags.html">Tags</a>: <a href="https://blog.geekinney.com/tag-书摘.html">书摘</a> </div>]]></description>
  <category><![CDATA[书摘]]></category>
  <link>https://blog.geekinney.com/2019-10-20-reading-notes-of-getting-things-done-one.html</link>
  <pubDate>Fri, 22 Nov 2019 17:18:23 +0800</pubDate>
</item>
<item>
  <title><![CDATA[使用org-mode撰写Jekyll blog ]]></title>
  <description><![CDATA[
<nav id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org73ec557">1. WorkFlow</a></li>
<li><a href="#org99b100d">2. 流程分析</a>
<ul>
<li><a href="#orgf4e33e2">2.1. 目录结构</a></li>
<li><a href="#org5a30dd7">2.2. 创建draft文件</a></li>
<li><a href="#orge965a9b">2.3. 从draft到post</a></li>
<li><a href="#org556e4ba">2.4. 项目发布</a></li>
<li><a href="#org8100082">2.5. 添加缺失样式</a></li>
<li><a href="#orgbdc6066">2.6. elisp代码</a></li>
</ul>
</li>
<li><a href="#orgcce106c">3. 参考文档</a></li>
<li><a href="#orgabbbf72">4. 更新!</a>
<ul>
<li><a href="#org4b84850">4.1. Oct 21, 2019</a></li>
</ul>
</li>
</ul>
</div>
</nav>
<p>
<b>Jekyll</b> 是使用ruby开发的静态网站生成器，它可以将不同的文本标记语言转变为静态html页面。Jekyll生成的静态站点可以被几乎所有的web server使用并且不需要额外的组件。Github Page就是使用Jekyll构建的。
</p>

<p>
这篇文章将讨论如何使用org-mode撰写，发布jekyll blog，我不会面面俱到地介绍每个概念，比如：什么是org-mode，什么是jekyll以及如何安装使用它们等。如果你对以上问题存疑，可以自行研究，参考 <a href="http://doc.norang.ca/org-mode.html">Org Mode - Organize Your Life In Plain Text!</a> 和 <a href="https://jekyllrb.com/">jekyll官网</a>。
</p>

<p>
Org-mode原生支持功能强大的HTML导出，但是没有内置关于blog的操作。
</p>

<p>
使用Org发布jekyll blog分为三步：
</p>

<ul class="org-ul">
<li>使用org-mode撰写blog内容</li>
<li>将org文件导出为html并放置在Jekyll项目中</li>
<li>启动jekyll服务，将html格式的文章解析呈现</li>
</ul>

<p>
接下来，着重介绍使用org-mode管理jekyll的原理和workflow，包括必要的elisp代码及折腾心得。
</p>


<div id="outline-container-org73ec557" class="outline-2">
<h2 id="org73ec557"><span class="section-number-2">1</span> WorkFlow</h2>
<div class="outline-text-2" id="text-1">
<p>
首先，总体浏览一下workflow。这个流程不算完美，但对于日常使用emacs的用户已经可以很方便的使用org-mode撰写、发布jekyll blog了。
</p>

<ul class="org-ul">
<li>打开emacs, <code>M-x jekyll-draft-post</code> ,输入文章标题。emacs会在 <code>_draft</code> 目标下新建带有YAML信息的org文件。</li>
<li>文章编辑完成后, <code>M-x jekyll-publish-post</code> 。emacs会将文章移动到 <code>_post</code> 目录下，并修改文件名为符合jekyll规范的名称(<sub>yyyy</sub>-mm-dd-title.org_)。</li>
<li>按键 <code>C-c C-e</code> 选择项目进行发布。发布后的org会转换成html格式保存在jekyll项目对应的 <code>_post</code> 目录下。</li>
<li>访问 <span class="underline"><a href="https://localhost:4000">https://localhost:4000</a></span> ，本地预览文章效果。如果需要修改，修改后重新发布项目。</li>
<li>确认无误后，git push 上传修改代码到github。</li>
</ul>
</div>
</div>

<div id="outline-container-org99b100d" class="outline-2">
<h2 id="org99b100d"><span class="section-number-2">2</span> 流程分析</h2>
<div class="outline-text-2" id="text-2">
<p>
看了以上的workflow，读者可能会有些疑惑，下面对流程具体讲解并附上必要的代码。
</p>
</div>
<div id="outline-container-orgf4e33e2" class="outline-3">
<h3 id="orgf4e33e2"><span class="section-number-3">2.1</span> 目录结构</h3>
<div class="outline-text-3" id="text-2-1">
<p>
注意区分两个概念：Jekyll Blog目录 和 Jekyll项目目录。Jekyll Blog中存在的是原始的Org文件，Jekyll项目中存放的是用于Jekyll解析的HTML文件。我将Org文件存储在云盘中，项目文件托管在Github Page。当然你也可以将两者放在同一个目录下托管，whatever~
</p>

<p>
我的Jekyll Blog目录放在 <code>~/iCloud/blog</code> 文件夹中，其中 <code>_drafts</code> 中为草稿，不会被导出, <code>_post</code> 中为待发布的post。当发布项目时, <code>_post</code> 中所有的org文件转换为HTML并发布到Jekyll项目根目录的 <code>_posts</code> 文件夹中。
</p>

<p>
Jekyll Blog目录结构如下：
</p>

<div class="col-auto">
<pre><code class="nohighlight">.
├── _drafts
│   └── using-org-to-blog-with-jekyll.org
├── _pages
│   └── bookmark.org
├── _posts
│   ├── 2019-03-30-emacs-learning-note.org
│   └── 2019-08-31-listen-music-in-emacs.org
└── assets
    ├── css
    ├── img
    └── js
</code></pre>
</div>

<p>
目录结构变量定义的elisp代码：
</p>

<div class="col-auto">
<pre><code class="emacs-lisp">(<span style="color: #a020f0;">defvar</span> <span style="color: #a0522d;">jekyll-directory</span> (expand-file-name <span style="color: #8b2252;">"~/iCloud/blog/"</span>)
  <span style="color: #8b2252;">"Path to Jekyll blog."</span>)
(<span style="color: #a020f0;">defvar</span> <span style="color: #a0522d;">jekyll-drafts-dir</span> <span style="color: #8b2252;">"_drafts/"</span>
  <span style="color: #8b2252;">"Relative path to drafts directory."</span>)
(<span style="color: #a020f0;">defvar</span> <span style="color: #a0522d;">jekyll-posts-dir</span> <span style="color: #8b2252;">"_posts/"</span>
  <span style="color: #8b2252;">"Relative path to posts directory."</span>)
(<span style="color: #a020f0;">defvar</span> <span style="color: #a0522d;">jekyll-post-ext</span> <span style="color: #8b2252;">".org"</span>
  <span style="color: #8b2252;">"File extension of Jekyll posts."</span>)
</code></pre>
</div>

<p>
Jekyll项目目录结构如下：
</p>

<div class="col-auto">
<pre><code class="nohighlight">.
|__ config.yml
|__ _includes
|__ _layouts
|    |- default.html
|    |- post.html
|__ _posts
|    |- 2019-03-30-emacs-learning-note.html
|    |- 2019-08-31-listen-music-in-emacs.html
|__ _site
|__ index.html
|__ assets
     |- js
     |- css
	|- style.css
</code></pre>
</div>
</div>
</div>

<div id="outline-container-org5a30dd7" class="outline-3">
<h3 id="org5a30dd7"><span class="section-number-3">2.2</span> 创建draft文件</h3>
<div class="outline-text-3" id="text-2-2">
<p>
根据 <code>jekyll-post-template</code> 变量的内容和输入信息，生成org文件。elisp代码如下：
</p>

<div class="col-auto">
<pre><code class="emacs-lisp">(<span style="color: #a020f0;">defvar</span> <span style="color: #a0522d;">jekyll-post-template</span>
  <span style="color: #8b2252;">"#+STARTUP: showall indent\n#+STARTUP: hidestars\n#+begin_export html\n---\ndate: \nlayout: post\ntitle: %s\nsubtitle: \nauthor: Geekinney\nheader-img: \ntags: \ncatalog: \n---\n#+end_export\n\n"</span>
  <span style="color: #8b2252;">"Default template for Jekyll posts. %s will be replace by the post title."</span>
  )

(<span style="color: #a020f0;">defun</span> <span style="color: #0000ff;">jekyll-make-slug</span> (s)
  <span style="color: #8b2252;">"Turn a string into a slug."</span>
  (replace-regexp-in-string
   <span style="color: #8b2252;">" "</span> <span style="color: #8b2252;">"-"</span> (downcase
            (replace-regexp-in-string
             <span style="color: #8b2252;">"[</span><span style="color: #8b2252;">^</span><span style="color: #8b2252;">A-Za-z0-9 ]"</span> <span style="color: #8b2252;">""</span> s))))

(<span style="color: #a020f0;">defun</span> <span style="color: #0000ff;">jekyll-yaml-escape</span> (s)
  <span style="color: #8b2252;">"Escape a string for YAML."</span>
  (<span style="color: #a020f0;">if</span> (<span style="color: #a020f0;">or</span> (string-match <span style="color: #8b2252;">":"</span> s)
          (string-match <span style="color: #8b2252;">"\""</span> s))
      (concat <span style="color: #8b2252;">"\""</span> (replace-regexp-in-string <span style="color: #8b2252;">"\""</span> <span style="color: #8b2252;">"\\\\\""</span> s) <span style="color: #8b2252;">"\""</span>)
    s))

(<span style="color: #a020f0;">defun</span> <span style="color: #0000ff;">jekyll-draft-post</span> (title)
  <span style="color: #8b2252;">"Create a new Jekyll blog post."</span>
  (<span style="color: #a020f0;">interactive</span> <span style="color: #8b2252;">"sPost Title: "</span>)
  (<span style="color: #a020f0;">let</span> ((draft-file (concat jekyll-directory jekyll-drafts-dir
                            (jekyll-make-slug title)
                            jekyll-post-ext)))
    (<span style="color: #a020f0;">if</span> (file-exists-p draft-file)
        (find-file draft-file)
      (find-file draft-file)
      (insert (format jekyll-post-template (jekyll-yaml-escape title))))))
</code></pre>
</div>

<p>
值得注意的是，模版中的YAML信息被包裹在了 <code>#+begin_export html</code> 和 <code>#+end_export</code> 标签之间。该标签之间的文本在Org转为HTML时会以原始文本导出，这为Jekyll解析HTML文件提供了保证。
</p>

<p>
带有合法YAML信息的markdown或html文件才能被Jekyll正常解析，我的YAML模版为：
</p>

<div class="col-auto">
<pre><code class="YAML">---
date: 
layout: post
title: 
subtitle: 
author: Geekinney
header-img: 
tags: 
catalog: 
---
</code></pre>
</div>

<p>
读者可以根据自己的项目需求修改 <code>jekyll-post-template</code> 变量。
</p>
</div>
</div>

<div id="outline-container-orge965a9b" class="outline-3">
<h3 id="orge965a9b"><span class="section-number-3">2.3</span> 从draft到post</h3>
<div class="outline-text-3" id="text-2-3">
<p>
将 <code>_drafts</code> 目录中的Org文件移到 <code>_posts</code> 中，在文件名前面加上日期。elisp代码如下：
</p>

<div class="col-auto">
<pre><code class="emacs-lisp">(<span style="color: #a020f0;">defun</span> <span style="color: #0000ff;">jekyll-publish-post</span> ()
  <span style="color: #8b2252;">"Move a draft post to the posts directory, and rename it so that it</span>
<span style="color: #8b2252;"> contains the date."</span>
  (<span style="color: #a020f0;">interactive</span>)
  (<span style="color: #a020f0;">cond</span>
   ((not (equal
          (file-name-directory (buffer-file-name (current-buffer)))
          (concat jekyll-directory jekyll-drafts-dir)))
    (message <span style="color: #8b2252;">"This is not a draft post."</span>))
   ((buffer-modified-p)
    (message <span style="color: #8b2252;">"Can't publish post; buffer has modifications."</span>))
   (t
    (<span style="color: #a020f0;">let</span> ((filename
           (concat jekyll-directory jekyll-posts-dir
                   (format-time-string <span style="color: #8b2252;">"%Y-%m-%d-"</span>)
                   (file-name-nondirectory
                    (buffer-file-name (current-buffer)))))
          (old-point (point)))
      (rename-file (buffer-file-name (current-buffer))
                   filename)
      (kill-buffer nil)
      (find-file filename)
      (set-window-point (selected-window) old-point)))))
</code></pre>
</div>
</div>
</div>

<div id="outline-container-org556e4ba" class="outline-3">
<h3 id="org556e4ba"><span class="section-number-3">2.4</span> 项目发布</h3>
<div class="outline-text-3" id="text-2-4">
<p>
Org-mode使用原生的项目发布功能就可以将 <code>_posts</code> 目录下的Org文件发布至Jekyll。配置 <code>org-publish-project-alist</code> 变量即可。变量参数设置如下：
</p>

<div class="col-auto">
<pre><code class="emacs-lisp">(<span style="color: #a020f0;">setq</span> org-publish-project-alist
      '(
        (<span style="color: #8b2252;">"jekyll-post"</span>
         <span style="color: #483d8b;">:base-directory</span> <span style="color: #8b2252;">"~/iCloud/blog/_posts"</span>
         <span style="color: #483d8b;">:base-extension</span> <span style="color: #8b2252;">"org"</span>
         <span style="color: #483d8b;">:publishing-directory</span> <span style="color: #8b2252;">"~/iCloud/huxBlog/_posts"</span>
         <span style="color: #483d8b;">:recursive</span> nil
         <span style="color: #483d8b;">:publishing-function</span> org-html-publish-to-html
         <span style="color: #483d8b;">:with-toc</span> nil
         <span style="color: #483d8b;">:headline-levels</span> 4
         <span style="color: #483d8b;">:auto-preamble</span> nil
         <span style="color: #483d8b;">:auto-sitemap</span> nil
         <span style="color: #483d8b;">:html-extension</span> <span style="color: #8b2252;">"html"</span>
         <span style="color: #483d8b;">:table-of-contents</span> nil
         <span style="color: #483d8b;">:section-numbers</span> 2
         <span style="color: #483d8b;">:body-only</span> t
         )

        (<span style="color: #8b2252;">"jekyll-static"</span>
         <span style="color: #483d8b;">:base-directory</span> <span style="color: #8b2252;">"~/iCloud/blog/assets/"</span>
         <span style="color: #483d8b;">:base-extension</span> <span style="color: #8b2252;">"css</span><span style="color: #8b2252; font-weight: bold;">\\</span><span style="color: #8b2252; font-weight: bold;">|</span><span style="color: #8b2252;">js</span><span style="color: #8b2252; font-weight: bold;">\\</span><span style="color: #8b2252; font-weight: bold;">|</span><span style="color: #8b2252;">png</span><span style="color: #8b2252; font-weight: bold;">\\</span><span style="color: #8b2252; font-weight: bold;">|</span><span style="color: #8b2252;">jpg</span><span style="color: #8b2252; font-weight: bold;">\\</span><span style="color: #8b2252; font-weight: bold;">|</span><span style="color: #8b2252;">gif</span><span style="color: #8b2252; font-weight: bold;">\\</span><span style="color: #8b2252; font-weight: bold;">|</span><span style="color: #8b2252;">pdf</span><span style="color: #8b2252; font-weight: bold;">\\</span><span style="color: #8b2252; font-weight: bold;">|</span><span style="color: #8b2252;">mp3</span><span style="color: #8b2252; font-weight: bold;">\\</span><span style="color: #8b2252; font-weight: bold;">|</span><span style="color: #8b2252;">ogg</span><span style="color: #8b2252; font-weight: bold;">\\</span><span style="color: #8b2252; font-weight: bold;">|</span><span style="color: #8b2252;">swf</span><span style="color: #8b2252; font-weight: bold;">\\</span><span style="color: #8b2252; font-weight: bold;">|</span><span style="color: #8b2252;">php"</span>
         <span style="color: #483d8b;">:publishing-directory</span> <span style="color: #8b2252;">"~/iCloud/huxBlog/assets"</span>
         <span style="color: #483d8b;">:recursive</span> t
         <span style="color: #483d8b;">:publishing-function</span> org-publish-attachment)

        (<span style="color: #8b2252;">"jekyll"</span>
         <span style="color: #483d8b;">:components</span> (<span style="color: #8b2252;">"jekyll-post"</span> <span style="color: #8b2252;">"jekyll-static"</span>))
        ))

</code></pre>
</div>

<p>
org-publish参数设置参考 <a href="https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html">HTML publishing tutorial</a>
</p>

<p>
<code>:body-only t</code> 表示只导出body标签之间的部分，因为其余的部分Jekyll已经构建好了。但是，由于Org导出的HTML的body标签之外包含一些CSS样式，这就埋下了一个隐患：部分org语法不能正常解析。需要手动添加缺失的CSS到Jekyll项目中。
</p>
</div>
</div>

<div id="outline-container-org8100082" class="outline-3">
<h3 id="org8100082"><span class="section-number-3">2.5</span> 添加缺失样式</h3>
<div class="outline-text-3" id="text-2-5">
<p>
主要缺失的样式有：代码块，表格，下划线，以及org-mode特有的keyword，timestamp等。下面给出添加的CSS参考：
</p>

<div class="col-auto">
<pre><code class="css"><span style="color: #0000ff;">pre </span>{
    <span style="color: #a020f0;">background</span>: <span style="color: #ffffff; background-color: #333;">#333</span>;
    <span style="color: #a020f0;">color</span>: <span style="color: #000000; background-color: #ddd;">#ddd</span>;
    <span style="color: #a020f0;">overflow</span>: auto;
    <span style="color: #a020f0;">padding</span>: 8pt;
    <span style="color: #a020f0;">border</span>: 1px solid <span style="color: #ffffff; background-color: #666;">#666</span>;
    <span style="color: #a020f0;">border-radius</span>: 5px;
    <span style="color: #a020f0;">font-size</span>: 10pt;
    <span style="color: #a020f0;">font-family</span>: <span style="color: #8b2252;">'PT Mono'</span>, <span style="color: #8b2252;">'PT Mono'</span>, monospace;
    <span style="color: #a020f0;">margin-top</span>: 1em;
    <span style="color: #a020f0;">margin-bottom</span>: 1em;
}
<span style="color: #0000ff;">table </span>{
    <span style="color: #a020f0;">font-size</span>: 100%;
    <span style="color: #a020f0;">border-collapse</span>: collapse;
    <span style="color: #a020f0;">margin</span>: .5em 0;
}
<span style="color: #0000ff;">th, td </span>{
    <span style="color: #a020f0;">border</span>: 1px solid <span style="color: #ffffff; background-color: #777;">#777</span>;
    <span style="color: #a020f0;">padding</span>: .3em;
    <span style="color: #a020f0;">margin</span>: 2px;
}
<span style="color: #0000ff;">th </span>{
    <span style="color: #a020f0;">background</span>: <span style="color: #000000; background-color: #eee;">#eee</span>;
}
<span style="color: #0000ff;">table </span>{ <span style="color: #a020f0;">border-collapse</span>: collapse; }
<span style="color: #0000ff;">td, th </span>{
    <span style="color: #a020f0;">vertical-align</span>: top;
}
<span style="color: #0000ff;">.todo  </span>{ <span style="color: #a020f0;">color</span>: <span style="color: #ffffff; background-color: #ff0000;">red</span>; }
<span style="color: #0000ff;">.done </span>{ <span style="color: #a020f0;">color</span>: <span style="color: #ffffff; background-color: #008000;">green</span>; }
<span style="color: #0000ff;">.priority </span>{ <span style="color: #a020f0;">font-family</span>: monospace; <span style="color: #a020f0;">color</span>: <span style="color: #ffffff; background-color: #ffa500;">orange</span>; }
<span style="color: #0000ff;">p.verse </span>{ <span style="color: #a020f0;">margin-left</span>: 3%; }
<span style="color: #0000ff;">.timestamp </span>{ <span style="color: #a020f0;">color</span>: <span style="color: #ffffff; background-color: #808080;">gray</span> }
<span style="color: #0000ff;">.timestamp-kwd </span>{ <span style="color: #a020f0;">color</span>: <span style="color: #000000; background-color: #f59ea0;">#f59ea0</span>; }
<span style="color: #0000ff;">.target </span>{ <span style="color: #a020f0;">background-color</span>: <span style="color: #ffffff; background-color: #551a8b;">#551a8b</span>; }
<span style="color: #0000ff;">.underline </span>{ <span style="color: #a020f0;">text-decoration</span>: underline; }
<span style="color: #0000ff;">.org-right  </span>{ <span style="color: #a020f0;">margin-left</span>: auto; <span style="color: #a020f0;">margin-right</span>: 0px;  <span style="color: #a020f0;">text-align</span>: right; }
<span style="color: #0000ff;">.org-left   </span>{<span style="color: #a020f0;">margin-left</span>: 0px;  <span style="color: #a020f0;">margin-right</span>: auto; <span style="color: #a020f0;">text-align</span>: left; }
<span style="color: #0000ff;">.org-center </span>{ <span style="color: #a020f0;">margin-left</span>: auto; <span style="color: #a020f0;">margin-right</span>: auto; <span style="color: #a020f0;">text-align</span>: center; }
</code></pre>
</div>

<p>
当然，你可以定制自己喜欢的样式，比如代码块的高亮可以使用 <a href="https://highlightjs.org">highlight.js</a>。关于org导出为HTML的CSS设置参考 <a href="https://orgmode.org/org.html#CSS-support">The Org Manual | CSS support</a>。
</p>
</div>
</div>

<div id="outline-container-orgbdc6066" class="outline-3">
<h3 id="orgbdc6066"><span class="section-number-3">2.6</span> elisp代码</h3>
<div class="outline-text-3" id="text-2-6">
<p>
完整的elisp package参考我的 <a href="https://github.com/Kinneyzhang/.emacs.d/blob/master/elisp/init-org-jekyll.el#L15">init-org-jekyll.el</a>。
</p>
</div>
</div>
</div>

<div id="outline-container-orgcce106c" class="outline-2">
<h2 id="orgcce106c"><span class="section-number-2">3</span> 参考文档</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li><a href="https://orgmode.org/worg/org-tutorials/org-jekyll.html">Using org to Blog with Jekyll | by Worg</a></li>
<li><a href="http://xshaun.github.io/jekyll-bootstrap/2014/08/27/jekyllbootstrap5-jekyll-introduction">Jekyll简介及工作原理</a></li>
<li><a href="https://segmentfault.com/a/1190000008313904">用Org-mode和Jekyll写博客</a></li>
</ul>
</div>
</div>

<div id="outline-container-orgabbbf72" class="outline-2">
<h2 id="orgabbbf72"><span class="section-number-2">4</span> 更新!</h2>
<div class="outline-text-2" id="text-4">
</div>
<div id="outline-container-org4b84850" class="outline-3">
<h3 id="org4b84850"><span class="section-number-3">4.1</span> Oct 21, 2019</h3>
<div class="outline-text-3" id="text-4-1">
<p>
我的workflow使用了 <a href="https://huangxuan.me/">Hux Blog</a> 默认的CSS，而默认的样式为markdown转html提供了相关样式支持，没有对org-mode的支持，这是需要添加“缺失样式“的原因。但是，这种方法太不优雅，并且我并不喜欢hux的默认样式。我希望自己可以控制整个org-mode导出效果，这样可以使用很多 <a href="https://emacs-china.org/t/org-mode-html/10120">漂亮的样式</a> 来渲染orgmode。
</p>

<div class="col-auto">
<pre><code class="plaintext">.
├── bootstrap.css
├── bootstrap.min.css
├── hux-blog.css
├── hux-blog.min.css
└── my-org.css
</code></pre>
</div>

<p>
以上为css目录的内容，hux-blog文件中存放了站点的所有样式，包括网站的基本结构和文章的渲染。
</p>

<p>
解决方法：
</p>
<ul class="org-ul">
<li>找出默认hux-blog CSS中与文章渲染的相关css注释掉。在hux中，所有包含 <code>.post-container</code> 的样式为文章渲染样式。</li>
<li>将用于orgmode导出渲染的 <code>my-org.css</code> 所有样式前面加上 <code>.post-container</code> 。</li>
<li>在html的header中引入 <code>my-org.css</code> 样式文件。</li>
</ul>

<p>
以上方案，仅以hux为例，读者可以作为思路的参考。具体问题请具体分析。
</p>
</div>
</div>
</div>
<div class="taglist"><a href="https://blog.geekinney.com/tags.html">Tags</a>: <a href="https://blog.geekinney.com/tag-emacs.html">emacs</a> <a href="https://blog.geekinney.com/tag-orgmode.html">orgmode</a> <a href="https://blog.geekinney.com/tag-jekyll.html">jekyll</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[orgmode]]></category>
  <category><![CDATA[jekyll]]></category>
  <link>https://blog.geekinney.com/2019-09-03-using-org-to-blog-with-jekyll.html</link>
  <pubDate>Fri, 22 Nov 2019 17:18:23 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Emacs中使用mpd+mingus听音乐]]></title>
  <description><![CDATA[
<nav id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orged45b01">1. mpd安装及配置(macos)</a>
<ul>
<li><a href="#orgda16cdc">1.1. 安装</a></li>
<li><a href="#org3cb6e87">1.2. 检查依赖</a></li>
<li><a href="#org560b6ba">1.3. 创建配置文件</a></li>
<li><a href="#orga02fa62">1.4. 编辑配置</a></li>
<li><a href="#org656483d">1.5. 使用命令</a></li>
<li><a href="#org18bf5f7">1.6. 注意点</a></li>
</ul>
</li>
<li><a href="#org9e3fc0c">2. mingus安装及使用</a>
<ul>
<li><a href="#org008f4ab">2.1. 安装</a></li>
<li><a href="#orgbc12893">2.2. 使用</a></li>
</ul>
</li>
<li><a href="#orge2c4299">3. 效果</a></li>
<li><a href="#orgacda60c">4. 参考文档</a></li>
</ul>
</div>
</nav>
<p>
在emacs中收听音乐的方案不止一个，我之前用过<a href="https://github.com/emacsmirror/emms">emms</a>和<a href="https://github.com/dbrock/bongo">bongo</a>，但它们在某些方面不能满足我的需求。在逛Reddit时看到使用mpd配合mingus播放音乐的帖子，折腾了一下发现这正是我想要的！总结安装配置和踩坑经验，和大家分享。
</p>

<p>
Music Player Daemon(mpd)是一个开源、灵活、功能强大的server端音乐播放器。它可以播放音乐、管理播放列表、维护音乐数据库等。mpd作为服务端程序，需要与客户端配合才能展现其强大的功能。最常使用的mpd客户端有mpc, ncmpcpp等。
</p>

<p>
而emacs的<a href="https://github.com/pft/mingus.git">mingus package</a>就相当于mpd在emacs中的client端。下面介绍mpd和mingus的安装和使用。
</p>

<div id="outline-container-orged45b01" class="outline-2">
<h2 id="orged45b01"><span class="section-number-2">1</span> mpd安装及配置(macos)</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-orgda16cdc" class="outline-3">
<h3 id="orgda16cdc"><span class="section-number-3">1.1</span> 安装</h3>
<div class="outline-text-3" id="text-1-1">
<p>
Mac用户可以很方便的使用homebrew安装mpd
</p>

<div class="col-auto">
<pre><code class="shell">$ brew install mpd
</code></pre>
</div>

<p>
也可以到<a href="https://www.musicpd.org">MPD官网</a>下载解压安装
</p>
</div>
</div>

<div id="outline-container-org3cb6e87" class="outline-3">
<h3 id="org3cb6e87"><span class="section-number-3">1.2</span> 检查依赖</h3>
<div class="outline-text-3" id="text-1-2">
<p>
安装完成后查看安装信息，检查是否编译成功。如果有依赖包没有安装，需要单独安装。
</p>

<div class="col-auto">
<pre><code class="shell">$ brew info mpd
</code></pre>
</div>
</div>
</div>

<div id="outline-container-org560b6ba" class="outline-3">
<h3 id="org560b6ba"><span class="section-number-3">1.3</span> 创建配置文件</h3>
<div class="outline-text-3" id="text-1-3">
<p>
mpd默认的配置文件查找路经为 <code>~/.mpd/mpd.conf</code> 或 <code>~/.mpdconf</code> ，这里建议将所有配置及相关数据文件放在一个.mpd文件夹中。
</p>

<div class="col-auto">
<pre><code class="shell">$ mkdir -p ~/.mpd/playlists
$ touch ~/.mpd/{mpd.conf,mpd.db,mpd.log,mpd.pid,mpdstate}
</code></pre>
</div>
</div>
</div>

<div id="outline-container-orga02fa62" class="outline-3">
<h3 id="orga02fa62"><span class="section-number-3">1.4</span> 编辑配置</h3>
<div class="outline-text-3" id="text-1-4">
<p>
进入 <code>~/.mpd/mpd.conf</code> ，粘贴如下配置
</p>

<div class="col-auto">
<pre><code class="TOML">music_directory "~/Music"  # 音乐文件目录
playlist_directory "~/.mpd/playlists"  # 播放列表目录
db_file "~/.mpd/mpd.db"  # 数据库
log_file "~/.mpd/mpd.log"  # 日志文件
pid_file "~/.mpd/mpd.pid"  # 进程文件
state_file "~/.mpd/mpdstate"  # 保存播放状态，下次继续播放
auto_update "yes"
auto_update_depth "2"
follow_outside_symlinks "yes"
follow_inside_symlinks "yes"

audio_output {
 type "osx"
 name "CoreAudio"
 mixer_type "software"
}

decoder {
 plugin "mp4ff"
 enabled "no"
}

bind_to_address "127.0.0.1"  # 服务器地址
port "6600"  # 服务器监听端口

audio_output {
 type "fifo"
 name "my_fifo"
 path "/tmp/mpd.fifo"
 format "44100:16:2"
 auto_resample "no"
 use_mmap "yes"
}
</code></pre>
</div>
</div>
</div>

<div id="outline-container-org656483d" class="outline-3">
<h3 id="org656483d"><span class="section-number-3">1.5</span> 使用命令</h3>
<div class="outline-text-3" id="text-1-5">
<div class="col-auto">
<pre><code class="shell">$ mpd  <span style="color: #b22222;"># </span><span style="color: #b22222;">&#21551;&#21160;&#26381;&#21153;</span>
$ mpd --kill  <span style="color: #b22222;"># </span><span style="color: #b22222;">&#26432;&#27515;&#36827;&#31243;</span>
$ mpd update  <span style="color: #b22222;"># </span><span style="color: #b22222;">&#26356;&#26032;</span>
</code></pre>
</div>
</div>
</div>

<div id="outline-container-org18bf5f7" class="outline-3">
<h3 id="org18bf5f7"><span class="section-number-3">1.6</span> 注意点</h3>
<div class="outline-text-3" id="text-1-6">
<ul class="org-ul">
<li>本配置及安装过程仅适用于macos系统。</li>
<li>linux系统参考 <a href="https://wiki.archlinux.org/index.php/Music_Player_Daemon">arch-wiki/Music Player Daemon</a></li>
<li>如果你连接了蓝牙耳机，初次启动mpd时建议断开连接，能够正常播放后再连接蓝牙。（防止音乐声音断断续续）</li>
</ul>
</div>
</div>
</div>

<div id="outline-container-org9e3fc0c" class="outline-2">
<h2 id="org9e3fc0c"><span class="section-number-2">2</span> mingus安装及使用</h2>
<div class="outline-text-2" id="text-2">
</div>
<div id="outline-container-org008f4ab" class="outline-3">
<h3 id="org008f4ab"><span class="section-number-3">2.1</span> 安装</h3>
<div class="outline-text-3" id="text-2-1">
<p>
mingus基本上是零配置，我只绑定了一个快捷键进入mingus主界面。
</p>

<div class="col-auto">
<pre><code class="emacs-lisp">(<span style="color: #a020f0;">use-package</span> <span style="color: #008b8b;">mingus</span>
  <span style="color: #483d8b;">:ensure</span> t
  <span style="color: #483d8b;">:defer</span> t
  <span style="color: #483d8b;">:bind</span> ((<span style="color: #8b2252;">"C-c m"</span> . mingus)))
</code></pre>
</div>
</div>
</div>

<div id="outline-container-orgbc12893" class="outline-3">
<h3 id="orgbc12893"><span class="section-number-3">2.2</span> 使用</h3>
<div class="outline-text-3" id="text-2-2">
<p>
mingus功能十分强大，内置大量快捷键，可以一键满足音乐播放方方面面的需求。使用 <code>M-x mingus</code> 启动mingus后，便可使用这些快捷键。
</p>

<p>
mingus有三个主界面"Mingus Help", "Mingus", "Mingus Browser"，可以使用数字键 <code>1</code> <code>2</code> <code>3</code> 进行切换。"Mingus Help"是帮助信息界面，介绍了所有的快捷键使用。"Mingus"是播放列表界面。"Mingus Browser"是搜索浏览界面，可以在音乐目录下进行分类搜索，将歌曲添加到播放列表中。
</p>

<p>
具体功能使用查看"Mingus Help"，不再赘述。值得一提的是，对于同类别的歌曲可以使用 <code>C-x C-s</code> 保存为playlist, 下次可以一键load歌单到播放列表中。
</p>
</div>
</div>
</div>

<div id="outline-container-orge2c4299" class="outline-2">
<h2 id="orge2c4299"><span class="section-number-2">3</span> 效果</h2>
<div class="outline-text-2" id="text-3">

<figure>
<img src="https://geekinney-1258820352.cos.ap-hongkong.myqcloud.com/blog-img/mingus.png" alt="mingus.png">

</figure>
</div>
</div>

<div id="outline-container-orgacda60c" class="outline-2">
<h2 id="orgacda60c"><span class="section-number-2">4</span> 参考文档</h2>
<div class="outline-text-2" id="text-4">
<p>
<a href="https://computingforgeeks.com/install-configure-mpd-ncmpcpp-macos">Install and configure mpd and ncmpcpp on MacOS</a>
</p>
</div>
</div>
<div class="taglist"><a href="https://blog.geekinney.com/tags.html">Tags</a>: <a href="https://blog.geekinney.com/tag-emacs.html">emacs</a> <a href="https://blog.geekinney.com/tag-mpd.html">mpd</a> <a href="https://blog.geekinney.com/tag-mingus.html">mingus</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[mpd]]></category>
  <category><![CDATA[mingus]]></category>
  <link>https://blog.geekinney.com/2019-08-31-listen-music-in-emacs.html</link>
  <pubDate>Fri, 22 Nov 2019 17:18:23 +0800</pubDate>
</item>
<item>
  <title><![CDATA[如何有效阅读一本书]]></title>
  <description><![CDATA[
<nav id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org580bfbd">1. 前言</a></li>
<li><a href="#org9a38d88">2. 第一章：用笔管理读书生活</a></li>
<li><a href="#orgb1375ec">3. 第二章：用购书清单指名购书</a></li>
<li><a href="#orgb8da99e">4. 第三章：用笔记把读过的书变成精神财富</a></li>
<li><a href="#org4a5f0e6">5. 第四章：通过重读笔记提高自我</a></li>
</ul>
</div>
</nav>
<p>
<b>《如何有效阅读一本书：超实用笔记读书法》 / (日) 奥野宣之 著，张晶晶 译 / 开始阅读：August 26, 2019 / 结束阅读：August 31, 2019</b>
</p>

<div id="outline-container-org580bfbd" class="outline-2">
<h2 id="org580bfbd"><span class="section-number-2">1</span> 前言</h2>
<div class="outline-text-2" id="text-1">
<p>
○ 无论在手机里保存多少书本，书里的内容都不会被保存在脑子里。用这本书里的关键词来比喻的话，就是这些内容既不能融入你的内心，也不能变成你无形的财富。与此相反，尽管抄完全书也不一定能记住全部内容，但某段文章、某个词、作者的语气和思想等等，都会随着抄写时的身体感觉被深深地刻印在头脑和身体里。
</p>

<p>
★ August 28, 2019<br>
抄写可以加深印象，练习可以巩固知识。比如，只是看视频教程，而不动手去敲代码，相当于没有学习。
</p>
<hr>
<p>
○ 读一本书时要把书里的内容记在脑中，这样在几年后甚至几十年后，这些内容还能继续发酵，还会因为目前正在经历的事情而被重新回忆起来，让人们再受一次感动，甚至还想再读一次那本书。如果能像这样与一本书来一次“深刻交流”，那就再理想不过了。
</p>

<p>
★ August 28, 2019<br>
好的书，好的句子在不同的情景下，不同的年纪回味，会有不一样的感觉。前提是你得记得！
<span class="underline">只是读过，就等于没读过。如果只是用眼睛看过，而不是记在脑子里，读再多的书也没有用。</span>
随着经历的丰富，偶尔会回想起高中背的一些古文诗句，有种恍然大悟的感觉。大概就是这个意思。
</p>
</div>
</div>

<div id="outline-container-org9a38d88" class="outline-2">
<h2 id="org9a38d88"><span class="section-number-2">2</span> 第一章：用笔管理读书生活</h2>
<div class="outline-text-2" id="text-2">
<p>
○ 笔记的使用方法，大体可以分为四种：
</p>
<ul class="org-ul">
<li>随想笔记：记下平时的感悟，这与日后的选书息息相关</li>
<li>购书清单：找到真正想读的书</li>
<li>各种报道的剪报：尽情收录感兴趣的内容</li>
<li>读书笔记：将读后感转变为文字保存下来</li>
</ul>

<p>
★ August 28, 2019<br>
当你开始关注信息本身时，你会发现一个不一样的世界。这是一个被信息充斥的世界，每一种信息背后都有一门学问，穷尽余生我们也不可能全部了解。   
当你对信息变得敏感，很容易可以发现自己的兴趣所在，对生活也会有独到思考。
</p>
<hr>
<p>
○ 思考让人如同置身于迷雾中。此时此刻想到的新点子，下一秒可能就要消云散了。如果不好好做记录，恐怕就再也想不起曾经闪现的想法了。但只要把这些想法写下来、保存在纸上，就等于把迷雾装进孰料袋紧紧扎好。将这些新鲜的想法打包以后，再过多久都不会轻易遗忘。
</p>

<p>
★ August 28, 2019<br>
即使是简单潦草的几个字，也会让这些灵感不至于烟消云散。
</p>
<hr>
<p>
○ 看到这里，你还会不会觉得这样只是把书放在一条流水线上毫无感情的处理了一遍呢？
</p>

<p>
★ August 28, 2019<br>
比喻很好！
</p>
<hr>
<p>
○ 将笔记本一元化的技巧:
1.可以书写任何内容 2.按时间顺序记录 3.附上日期 4.灵活运用速记或略记 5.可以粘贴
</p>

<p>
★ August 28, 2019<br>
分类整理与信息一元是两种不同的哲学。两种使用场景不同，大多数时候我更倾向于后者。  
有的时候事无巨细的分类反而会降低获取信息的效率，在接近目标之前总要先思考一番它属于什么类别，在分类的时候总是纠结该如何合理划分，如何处理交叉项&#x2026;这一系列动作下来简直叫人头大！我也在很多时候深受其害，宥于形式，忘了本质。   
把所有内容放在一个篮子里，简单方便。再配合搜索功能，便可快速定位信息。Mac的设计哲学就是这个样子的。
</p>
</div>
</div>

<div id="outline-container-orgb1375ec" class="outline-2">
<h2 id="orgb1375ec"><span class="section-number-2">3</span> 第二章：用购书清单指名购书</h2>
<div class="outline-text-2" id="text-3">
<p>
○ 通过在清单上书写这一动作，可以确认自己此次读书的目的。比如购买小说或纪实作品时，会考虑是为了享受故事、玩味文章、沉浸在作品的气氛中、了解本书的作家还是为了分析最近一段时间的文学走向；比如购买商业书籍时，则会考虑是为了要以后运用到工作或者兴趣爱好中、方便传授给他人、提高自身涵养还是为了能够立即付诸实践。
</p>

<p>
★ August 28, 2019<br>
不同类型的书特点不同，也导致了的阅读方式、阅读目的、做读书笔记的方式的差异化。  
小说我主要看描写、遣词造句的技巧，故事节奏的把控，悬疑的铺陈等。  
方法介绍类书籍主要把握思想要点，可以快速阅读。
</p>
<hr>
<p>
○ 所谓阅读的动机或目的性，就好比照片的“焦点”。即使拍摄同样的场景，聚焦于面前的花朵和聚焦于远处的建筑，得到的效果完全不同。读书也一样，抱着不同的目的阅读同一本书，也会产生截然不同的效果。
</p>

<p>
★ August 28, 2019<br>
相机焦点的比喻很好。
</p>
<hr>
<p>
○ 选择图书，重要的是看平时收集的信息，要经常竖起敏感的天线。平时提高了敏感度，就算没有特意去找，也能在日常生活中收集很多有意思的信息。这样积累下去，想读的书要多少有多少，根本不需要去网上搜索。
</p>

<p>
★ August 28, 2019<br>
“敏感的天线”，很形象的比喻！博闻强识的人遇到任何的话题都能聊出点东西来，要么是生活阅历丰富，要么就是博览群书。如是种种，必定是对生活充满好奇之心。  
这种好奇心就是《奇风岁月》中描述的“神秘力量”，是丰子恺笔下的插画，是钱钟书眼中的“蚊帐游戏”，是宫崎骏的动画，是每一个孩子眼中的世界和大人眼中的孩子。  
关于童心、好奇心、想象力&#x2026;的话题，是很值得被研究和探讨的。
</p>
<hr>
<p>
○ 这样考虑可能更容易理解：潜水艇有“主动声纳”和”被动声纳“两种声纳系统。主动声纳是靠自身发出的声波反射状态来进行计量的，而被动声纳则是考接受其他船只或潜水艇发出的声波来活动的。也许你觉得主动声纳听起来更厉害，但得到广泛使用的恰恰是被动声纳系统。
</p>

<p>
人类也是，最先贯彻的应该是”被动声纳“，也就是通过报纸、杂志、书籍和电视等途径，尽可能多地捕捉日常中接触的信息，把感兴趣的书名或主题都写在笔记本上的随想笔记里。
</p>

<p>
★ August 28, 2019<br>
声纳的比喻很形象。先是被动接收，然后主动创造，很多事情好像都有这么个道理。
</p>
</div>
</div>

<div id="outline-container-orgb8da99e" class="outline-2">
<h2 id="orgb8da99e"><span class="section-number-2">4</span> 第三章：用笔记把读过的书变成精神财富</h2>
<div class="outline-text-2" id="text-4">
<p>
○ 至于能否得心应手的做好读书笔记，进而熟练的参考记录过的笔记，都是坚持写读书笔记几年甚至是几十年后才能收到的效果。所以，为了达到这样的境界，一切都应该以“能坚持下去”为先。
</p>

<p>
★ September 01, 2019<br>
这一点太关键了！哪怕只是记录一句话，写和不写是有很大差别的。决定坚持做一件事情就要持续不断的做下去，中途间断了一次就会有间断第二次的可能，第三次，第四次&#x2026;最后就会放弃。最好的办法是不要间断，让记录的过程变的简单。鲁迅先生有写日记的习惯。如果当天没有特别的事情，他也会记上一句“今日无事”。
</p>
<hr>
<p>
○ 只要记得重点放在“摘抄对自己来说很重要的文章”和”写主观评论”上即可。即使客观上很重要，如果眼前的信息无法与自己在感性层面上产生共鸣，那么再读多少次也不会有感悟。
</p>

<p>
★ September 01, 2019<br>
之前总会担心漏掉一些重要的句子，其实不必担心。读不懂和没有感触的内容，即使客观上重要，也无需摘抄。无需像做语文阅读理解，非要给一段文字编造出什么意义来&#x2026;
</p>
<hr>
<p>
○ 如果在一本书做了很多标记，那么在写读书笔记之前还是暂时将其放置一段时间吧。即使是读完后认为受益匪浅的书，过一段时间以后也会变得“不过如此”。需要摘抄的内容也会随之减少。
</p>

<p>
★ September 01, 2019<br>
受情绪影响，我们大概率会作出不恰当的判断，但时间是试金石。有价值的内容在时间洗礼后仍能熠熠发光，我们的判断在时间的沉淀中愈发的趋于理性。当不确信自己的判断或决定是否适合时，不妨等一等。
</p>
<hr>
<p>
○ 好主意不会凭空出现。不论是什么想法，都一定是对某种刺激作出的回应。所以，只有看到一个名为“好书”的好球飞过来，我们才能打出那个名为”好主意“的绝妙击球。
</p>

<p>
★ September 01, 2019<br>
主观印象是对客观实在的反应。晚上做的梦是平时所思所感的排列组合，不可能创造出毫无根据的外星人形象&#x2026;. 新的思考总是建立在旧思考基础上的，读书时获得的感想就是原创思考的源泉。
</p>
<hr>
<p>
○ 请找到那本能够成就自己的书。失落的时候，走投无路无路的时候那本书都会成为自己的心灵支柱。
</p>

<p>
★ September 01, 2019<br>
很想感受这种通过一本书找到心灵支柱的感觉。现在人们的生活不那么困难了，应该很难有这种深刻的体验了吧。据我所知，在困苦的年代，一本好书确实可以成为一个人活下去的动力与希望。《约翰.克里斯朵夫》就是这样一本书！
</p>
</div>
</div>

<div id="outline-container-org4a5f0e6" class="outline-2">
<h2 id="org4a5f0e6"><span class="section-number-2">5</span> 第四章：通过重读笔记提高自我</h2>
<div class="outline-text-2" id="text-5">
<p>
本章讲诉读书笔记法的最后一个步骤：活用。
</p>

<p>
○ <b>学以致用的读书体验</b>
</p>

<p>
做读书笔记为什么一定要写下自己的感想？因为对读完的内容进行主动思考，才能真正掌握书本中的内容。在读书笔记中再生产出原创文章，就像把一把刀磨得更锋利。原创文章中的思想也一定是更细致、深刻的。
</p>

<p>
○ <b>积极输出促进思想内化</b>  
</p>

<p>
我们一定有过这样的体验，想别人传达自己的想法时，一开始杂乱无章的语言表达在叙述的过程中会逐渐清晰和有逻辑，这是最常见的思想输出。哪怕是我们非常了解的事情，一旦需要向别人说明或者写下来，还是会有很多模糊不清的内容。事后，再查阅资料，重新审视自己的观点，建立起思想体系，我们就会有所提高。
</p>

<p>
○ <b>在固定场景中重读笔记</b>
</p>

<p>
为了重读时能集中精神，易于坚持，建议在固定的场景重读读书笔记。睡前，洗澡后，通勤途中或无聊的时候&#x2026;选择适合自己的时间段即可。总之，要为重读笔记营造一个轻松愉快的氛围，好像处于好奇而翻旧报纸，为了消磨时间而翻开字典或图鉴一样，在不知不觉中吸收信息。当你翻开两三个月以前的笔记时，说不定会惊讶：“原来我还读过这本书名，我竟然有过这么奇怪的想法”。这就是重读笔记带来的惊喜。
</p>

<p>
○ <b>养成重读的习惯</b>
</p>

<p>
把重读笔记加入日程中，找了能够集中精力思考的地方重读和写读书笔记，多思考怎样写更方便日后阅读。
</p>

<p>
○ <b>在重读过程中有所收获</b>
</p>

<p>
曾经不理解的内容在重读时可能会恍然大悟。关键要记录下当时真实的想法和思考，为新的发现做准备。在我看来，所有的笔记性工作，日记也好，读书笔记也罢，真正要价值，有意义的地方在于重读或回顾。只是记录一遍收效甚微，重读可以将记录的价值无限放大。
</p>

<p>
○ <b>通过重读为思想增色</b>  
</p>

<p>
根据自己对参考的需求，安排重读的策略：
想要简单回顾时，重读读书笔记；想回忆起更多时，参考书中的重要段落；想重头开始看起时，重读原书。
</p>

<p>
如果把一本书比作一个场所，那么读书笔记就是在这个场所拍摄的照片。在不同的时间去同一个场所拍照，拍出来的照片都会有所不同，4而过一段时间再去看这些照片，对那个场所的印象也会发生变化。
</p>

<p>
遇到现实中的问题，多想想“那本书里是怎么说的””那位作者是怎么说的“，像这样退几步考虑大局，就可以避免目光短浅地下结论。
</p>

<p>
○ <b>过去的读书体验在读书生活中的运用</b>
</p>

<p>
读书的时候，学会“事先扫平障碍”，先读简单的部分有助于理解较难的内容。读书笔记也可以逐章、逐项的写，这样会比从头到尾读一遍理解更深刻。读较难的专业书可以先读简单的相关书籍来过渡。理解同一个作者的观点时，也可以读不同时期的书参考比较。
</p>

<p>
○ <b>在博客上写书评</b>
</p>
</div>
</div>
<div class="taglist"><a href="https://blog.geekinney.com/tags.html">Tags</a>: <a href="https://blog.geekinney.com/tag-书摘.html">书摘</a> </div>]]></description>
  <category><![CDATA[书摘]]></category>
  <link>https://blog.geekinney.com/2019-08-28-reading-notes-of-how-to-read-a-book-efficiently.html</link>
  <pubDate>Fri, 22 Nov 2019 17:18:23 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Get Started With Emacs ]]></title>
  <description><![CDATA[
<nav id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org269e7f2">1. 介绍</a></li>
<li><a href="#org2675c50">2. 安装</a>
<ul>
<li><a href="#orgd9dd881">2.1. 安装emacs</a></li>
<li><a href="#org146877a">2.2. 克隆配置文件</a></li>
<li><a href="#org3c95849">2.3. 启动emacs，等待所有package安装完毕</a></li>
</ul>
</li>
<li><a href="#org914361a">3. 使用</a>
<ul>
<li><a href="#org87a304e">3.1. 常用快捷键</a></li>
</ul>
</li>
<li><a href="#org459eb89">4. visual thinking</a></li>
</ul>
</div>
</nav>
<blockquote>
<p>
懒猫说：“Emacs是开源社区的典范, 也是全球顶尖黑客的思想结晶。没有Emacs, 我真的不会这么多年坚持做开源软件。Emacs时刻提醒我, 这个世界上有太多太多的聪明人比我更勤奋和有趣, 它就像一个每天都在增长的金字塔, 只有自己不断努力, 才能看到顶尖黑客是怎么切磋的.”
</p>
</blockquote>

<p>
都说emacs的学习曲线很陡峭，我觉得这得看情况。对于程序员或乐于折腾的人，配置舒服的开发环境，编写自己的插件确实需要可观的时间成本。但对于普通的学习、办公人员，emacs也同样可以成为称手的效率工具。事实上，我一直觉得，计算机领域的很多工具与想法值得被更多的非程序员所了解并使用。比如说，emacs！
</p>

<p>
这是一个系列blog的开篇，我将从个人理解的角度介绍一些实用的emacs workflow。期望非程序员在日常办公学习中也能很好的使用这个“神之编辑器”。当然，对于初次了解emacs的程序员，这也可以作为一个很好的开始，并且我相信，你一定会爱上它的。happy hacking emacs!
</p>

<p>
自从入坑emacs，它几乎就成了我每天必用的app(or os?)。我主要用emacs来做笔记、敲代码、管理时间、管理目录、管理代码、听音乐和podcast、学英语、hacking emacs&#x2026;
</p>

<div id="outline-container-org269e7f2" class="outline-2">
<h2 id="org269e7f2"><span class="section-number-2">1</span> 介绍</h2>
<div class="outline-text-2" id="text-1">
<p>
你一定很好奇，这个emacs究竟是个什么东西，竟然可以同时拥有如此多的功能。其实它并不神秘，从本质上说，emacs就是一个文本编辑器。我们熟悉的文本编辑器有word, vim, atom, vscode等。
</p>

<p>
简单的说，emacs能够实现以上很多的功能依赖于emacs-lisp语言，通过编写elisp程序可以定制几乎所有的功能。而很多的功能前人已经造好了轮子，这些轮子就是emacs的插件。比如，用于文本编辑、任务管理的org-mode；用于目录管理的dired-mode，用于git管理的magit等。各种编程语言都有自己的插件，python-mode, js2-mode, web-mode&#x2026;
</p>

<p>
对于初学者，不需要学习elisp语言，可以克隆他人成熟的配置先用起来。当你对emacs足够了解，自然会想要学习elisp定制一些功能和编写自己的插件。这是一个水到渠成的过程。
</p>
</div>
</div>


<div id="outline-container-org2675c50" class="outline-2">
<h2 id="org2675c50"><span class="section-number-2">2</span> 安装</h2>
<div class="outline-text-2" id="text-2">
</div>
<div id="outline-container-orgd9dd881" class="outline-3">
<h3 id="orgd9dd881"><span class="section-number-3">2.1</span> 安装emacs</h3>
<div class="outline-text-3" id="text-2-1">
<p>
可以从 <a href="https://www.gnu.org/software/emacs/">GNU Emacs 官网</a> 下载合适的版本。MacOS用户也可以通过homebrew安装。
</p>

<div class="col-auto">
<pre><code class="shell">$ brew cask install emacs
</code></pre>
</div>
</div>
</div>


<div id="outline-container-org146877a" class="outline-3">
<h3 id="org146877a"><span class="section-number-3">2.2</span> 克隆配置文件</h3>
<div class="outline-text-3" id="text-2-2">
<p>
可以使用我的emacs配置。第一行代码是备份，防止自己的 <code>.emacs.d</code> 被覆盖(如果是初次接触emacs，则无所谓)。第二行代码是克隆配置文件夹.emacs.d到用户主目录。
</p>

<div class="col-auto">
<pre><code class="shell">$ mv ~/.emacs.d ~/.emacs.d.bak
$ git clone --depth=1 https://github.com/Kinneyzhang/.emacs.d.git ~/.emacs.d --recursive
</code></pre>
</div>


<p>
如果你不知道如何使用命令行，一个简单的办法就是访问 <a href="https://github.com/Kinneyzhang/.emacs.d">.emacs.d</a> ，点击 <code>Clone or download</code> 中的 <code>Download ZIP</code> 下载到本地，然后解压到用户主目录。
</p>
</div>
</div>

<div id="outline-container-org3c95849" class="outline-3">
<h3 id="org3c95849"><span class="section-number-3">2.3</span> 启动emacs，等待所有package安装完毕</h3>
</div>
</div>

<div id="outline-container-org914361a" class="outline-2">
<h2 id="org914361a"><span class="section-number-2">3</span> 使用</h2>
<div class="outline-text-2" id="text-3">
<p>
Emacs 快捷键基本中的基本是这几个：
</p>

<ul class="org-ul">
<li>C（ <code>Ctrl</code> 或者 <code>control</code> 键）</li>
<li>M（Meta，PC 中对应 <code>Alt</code> ，Mac 上对应 <code>option</code> ），Meta 键来自 Solaris，常见 PC 都不具备该键</li>
<li>S（uper，PC 对应 <code>Win</code> 键，Mac 对应 <code>command</code> ）</li>
</ul>

<p>
在 Emacs 中，快捷键通常都是多个快捷键的组合，在前面的快捷（或组合）通常称为 prefix key，比如最常用的 <code>C-x C-c</code> 的 prefix key 就是 <code>C-x</code> 。相同 prefix key 的快捷键在功能上通常都有相似之处。
</p>
</div>

<div id="outline-container-org87a304e" class="outline-3">
<h3 id="org87a304e"><span class="section-number-3">3.1</span> 常用快捷键</h3>
<div class="outline-text-3" id="text-3-1">
<ul class="org-ul">
<li>Ctrl + a：移到行首</li>
<li>Ctrl + e：移到行尾</li>
<li>Ctrl + p/n：光标上下移动</li>
<li>Ctrl + f：按字符前移（右向）</li>
<li>Ctrl + b：按字符后移（左向）</li>
<li>Meta + f：按单词前移（右向）</li>
<li>Meta + b：按单词后移（左向）</li>
<li>Ctrl + k：从光标处剪切至行尾</li>
<li>Ctrl + w：剪切</li>
<li>Meta + w: 复制</li>
<li>Ctrl + y：粘贴</li>
<li>Ctrl + g：取消输入</li>
</ul>

<p>
详细快捷键信息参见 <a href="https://caiorss.github.io/Emacs-Elisp-Programming/Keybindings.html">Emacs Key Bindings</a>
</p>
</div>
</div>
</div>

<div id="outline-container-org459eb89" class="outline-2">
<h2 id="org459eb89"><span class="section-number-2">4</span> visual thinking</h2>
<div class="outline-text-2" id="text-4">

<figure>
<img src="https://emacs.sexy/img/How-to-Learn-Emacs-v2-Large.png" alt="How-to-Learn-Emacs-v2-Large.png">

</figure>
</div>
</div>
<div class="taglist"><a href="https://blog.geekinney.com/tags.html">Tags</a>: <a href="https://blog.geekinney.com/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://blog.geekinney.com/2019-08-18-get-started-with-emacs.html</link>
  <pubDate>Fri, 22 Nov 2019 17:18:23 +0800</pubDate>
</item>
<item>
  <title><![CDATA[关于写日志]]></title>
  <description><![CDATA[
<p>
<b>写日志</b> 的一个重要好处就是通过每日的反思不断调整，使得事情朝着正确的方向发展。正确的标准是什么？首先自己得舒心，如果事情越做越难受，大抵是什么方面出了问题；其次是对事情的进展是否起促进作用，意识具有主观能动性，正确的意识促进事物的发展，错误的意识阻碍事物的发展；再者，检查事情的现状与初衷是否相符，如果忘记了为何出发，如何知道去向何处。
</p>

<p>
写日志的目的是什么？日志，顾名思义，一日的记录。记录的内容可以涉及方方面面，大体可以分为虚实两方面，即经历与思考。记录的目的主要有几个方面：一、给生活留下印记，所以要尽可能的全面真实。二、作为写作的素材，每日的灵感是很宝贵的思想财富，大概率可以应用于将来的写作中。三、锻炼表达与语言组织能力，在缺少与人言语交流的情况下，写文字也可以很好的锻炼遣词造句和逻辑表达。四、抒发情绪与观点，大部分文学作品都带有作者强烈的自我意识与情绪表达，写作很好的满足了作者的表达需求。五、思考与反思，这是我写日志最主要的原因与动力，也是我认为的最有价值的属性。没有十全十美的人，人总要在不断反思与自我批判中成长。反思的反义词叫“浑浑噩噩”。
</p>

<p>
应该通过何种形式来组织日志？以自己最舒服，最喜欢的方式。日志不是博客、新闻或论文等，不需要考虑受众。怎么喜欢怎么来就行。
</p>

<p>
形式不受限制并不是意味着毫无限制。回顾写日志的目的，至少要清晰的描述事件，准确的表达观点。如果你想作为写作可以参考的素材，最好附上相关引用链接，介绍清楚来龙去脉。如果要锻炼文字表达能力，要求就更高了，注意句式，注意运用修辞与描写方法，内心活动什么的。切忌漫无目的的意识流。要求再高一点，写长文一定要列提纲；短文也要做到心中有框架。关于如何列提纲，参考 这篇文章，以后我也会总结这篇文章中的观点。
</p>

<p>
如果你在没有做研究的情况下撰写文章观点，基本上是不可能全面的；即使全面了，某些内容也会随着时间的推移而过时。这就是为什么写日志的最后一步叫"revise"修改。都说好文章是改出来的，没毛病！
</p>
<div class="taglist"><a href="https://blog.geekinney.com/tags.html">Tags</a>: <a href="https://blog.geekinney.com/tag-杂思.html">杂思</a> </div>]]></description>
  <category><![CDATA[杂思]]></category>
  <link>https://blog.geekinney.com/2019-08-05-thinking-about-journaling.html</link>
  <pubDate>Fri, 22 Nov 2019 17:18:23 +0800</pubDate>
</item>
<item>
  <title><![CDATA[关于大学计算机科学]]></title>
  <description><![CDATA[
<p>
我以为学习计算机科学的学生在刚进入大学的时候，学院学校就要让学生了解到这个学科的森林，而非树木。建立学科体系结构和了解学科本质对于学习相当重要。我指的不是像每个专业大一的导论课，讲解大学四年学习课程的基础内容，最后用一张考试卷评判知识点的掌握程度。
</p>

<p>
构建学生对于学科的森林的认识应当不是一般的大学老师可以胜任的。计算机科学体系庞杂，分支众多，能够站在一定的高度还原计算机科学本质的专家教授才能上好这堂大学专业第一课。换句话说，这门课对讲授者的要求很高，讲授的内容要直观又不失深度，严肃而充满乐趣。课堂的作业多以开放性的思考与探索为主。课程考核学生对专业的理解与思考。
</p>

<p>
要给学生树立学习的榜样。站得高才能看得远，看得见远方的美景才有去向远方的动力。新生对在校学习可以达到的高度，将来研究内容的深度，自己能够创造的价值是缺乏认知的。要相信每一个学生都想变得更好，前提是给学生看到远方并给予希望。
</p>

<p>
看得到未来的理想生活，了解了努力的方向，学生的心中便种下了一颗种子，用四年的时间让它发芽成长开花结果。一个人、两个人、一群人，人是环境的产物，一群人的行动会汇聚成强大的磁场，吸引周围更多的人加入这个积极的队伍。
</p>

<p>
多学一个知识不如多听一堂讲座，多做几道题目不如多写几篇思考。大学的课程不以知识技能为导向，多以思考理解为导向，以理解带动知识学习，这样学生的学习效率会不会有极大的提高？
</p>
<div class="taglist"><a href="https://blog.geekinney.com/tags.html">Tags</a>: <a href="https://blog.geekinney.com/tag-杂思.html">杂思</a> </div>]]></description>
  <category><![CDATA[杂思]]></category>
  <link>https://blog.geekinney.com/2019-08-02-thinking-about-cs-teaching-in-college.html</link>
  <pubDate>Fri, 22 Nov 2019 17:18:23 +0800</pubDate>
</item>
<item>
  <title><![CDATA[重拾阅读 ]]></title>
  <description><![CDATA[
<p>
我相信，一本好书是值得反复阅读品鉴的。今天读完了《月亮与六便士》，想着应该写点什么，毕竟这是我时隔好久完整地读完一本书了。
</p>

<p>
对于很难坚持阅读的我来说，这一刻是有重要意义的。这意味着我过去很多年在阅读上的心结打开了，也宣告着以后我会以更加积极的心态与行动去拥抱阅读这件事。曾经有多少次的心血来潮，买了一本本书；曾经又有多少次下定决心，从读书笔记开始，庄严的进入阅读的殿堂；多少次拿起kindle，又多少次把它丢在宿舍的某个角落很久&#x2026;&#x2026;
</p>

<p>
有多少次的坚持，就有多少次的放弃。一直以来，我都在思考探索着适合我的阅读方式，憧憬着像某位大师饱读群书，挥笔如有神。到头来发现，重要的不是形式，而是我的这颗心，我为什么要阅读。
</p>

<p>
以前阅读的目的很功利，想着读完一本书，自己的文笔就能有质的提升。看完一篇文章，就记录下里面的精彩句子，写上自己的收获与感悟。读每一句的时候都在揣摩文字背后的深意，学习遣词造句的技巧。可是，这样的阅读方式，太累了！坚持不了多久就放弃了，到头来发现不仅没有多少收获，反而因阅读这件事耗费了大量的精力。
</p>

<p>
如果阅读的过程如此的让人不堪其负，这不是阅读最初该有的模样！
</p>

<p>
说到这，暂且把对阅读的思考放一放，回到《月亮与六便士》这本书。
</p>

<p>
当翻到书的最后一页的时候，我有些茫然，心里有种说不出来的滋味。是一种意犹未尽?是期待着有更加传奇，震撼人心的事情发生?还是觉得自己没有完全读懂这本书？都有一点！在我们普通人看来斯特里克兰的人生是有传奇色彩的，这种传奇不是我们能够复刻但也远非不可触及的。如今在影视圈泛滥的一些修仙玄幻题材的作品讲诉的故事引人入胜，但观众也只是看着开心罢了，不会有人去效仿或者思考其背后的逻辑。但斯特里克兰的故事是实实在在的生活啊！任何一个现实中的人看到这样的故事，大抵上不会没有思考，不会不想去了解这样的人活着的逻辑吧。
</p>

<p>
关于斯特里克兰的故事其实并不复杂，我可以用很简短的一段话来概括：一个家庭美满，事业成功的证券经纪人，一夜之间抛弃一切，远走他乡，从伦敦到巴黎，追求他的画画梦想。他在巴黎穷困潦倒，吃尽苦头，勾引朋友的妻子导致她自杀。他对周围的一切都残忍冷酷，包括他自己。最终来到了南太平洋的一座小岛，娶妻生子，与世隔绝，终于创造出改写现代艺术史的不朽之作。可临终前却叮嘱自己的土著妻子一把火烧了自己的杰作&#x2026;&#x2026;
</p>

<p>
上述文字是小说导读的内容，在开始阅读这本书之前你就会了解到主人公的一生，你或许会讨厌这样的人设，觉得他冷酷无情，毫无道德观念。没错，毛姆想要刻画的斯特里克兰正是这样的一个人。但请记住，他的无情不是自私，因为他对自己也这样！他所追求的是一种原始的美，一种对美的渴望与创造。这种渴望让他像着了魔一样忽视了一切的人，事，感受。我把这种状态理解为追求理想的理想主义。用通俗的话来说就是我们经常说的追寻自己的内心，不要太在意别人对你的评价！哦豁，多么耳熟能详的话，写过高中作文的你一定深谙这个道理，并且还会引经据典，阐述论证。但是人就是这样，知道不一定懂得，懂得不一定会践行。当现实中的你面对抉择的时候，早就把这些话抛诸脑后了吧。
</p>

<p>
人往往不是自己渴望成为的人，而是不得不成为的人。真正的痛苦不是不去追求，而是活着求而不得，守着错误的选择煎熬一生。这种时候你有斯特里克兰的勇气吗？你可以为了曾经的梦想去舍弃安定的生活吗？或者说反过来，你能够为了平淡的生活舍弃自己追寻的梦想吗？只要遵循自己的内心，月亮或者六个便士，无论你选那种，都是幸福的，这大概是这部小说想要告诉我们的吧。
</p>

<p>
什么是生活的意义？不是看到别人画画也去画画，不是听爸爸说，听老师说，听别人说你要做什么。这些没人能真正告诉你，需要你自己满怀勇气，去探索找寻。去问一问自己的心，我想要的究竟是什么。
</p>

<p>
回到阅读这件事。既然阅读的过程让我痛苦，那我为什么还要不断的尝试呢？爸爸妈妈老师说，你要多读书呀，腹有诗书才能写好作文。可事实证明抱着这样的心态去读书，我经历了一次次坚持后的放弃。何为读书的意义？我为什么要阅读？阅读时候的我为何无法享受其中？&#x2026;&#x2026;我不断的拷问着自己的内心，不停的找寻思考。直到读完月亮与六便士，我以一种平静的心态，以一个局外人的目光去窥视主人公的一生，小心翼翼地走进斯特里克兰的生活。我会为他的离家出走愤懑不解，也会为他流落街头同情惋惜，我想要去探索他的精神世界，想要搞懂他的行为逻辑，想从小说的故事去思考自身，对应现实&#x2026;&#x2026;一切都在阅读中不经意的进行。一直读到最后一页，长抒了一口气：真是，精彩！
</p>

<p>
这才是真正的享受阅读。
</p>

<p>
一本好书是值得反复阅读品鉴的，我想每年重读一遍《月亮与六便士》，这本畅销书中的经典。
</p>
<div class="taglist"><a href="https://blog.geekinney.com/tags.html">Tags</a>: <a href="https://blog.geekinney.com/tag-阅读.html">阅读</a> </div>]]></description>
  <category><![CDATA[阅读]]></category>
  <link>https://blog.geekinney.com/2019-07-21-pick-up-reading-after-read-the-moon-and-sixpence.html</link>
  <pubDate>Fri, 22 Nov 2019 17:18:23 +0800</pubDate>
</item>
<item>
  <title><![CDATA[emacs学习笔记 ]]></title>
  <description><![CDATA[
<nav id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orge114c89">1. 文件操作</a></li>
<li><a href="#orge1f7be3">2. 列表</a></li>
<li><a href="#orgf240ea5">3. 表格</a></li>
<li><a href="#orga0c9b1b">4. 链接</a></li>
<li><a href="#org3067241">5. 待做列表</a></li>
<li><a href="#org4bfebdd">6. 时间</a></li>
<li><a href="#org2835ee0">7. 特殊文本格式</a></li>
<li><a href="#org506963f">8. 富文本导出</a>
<ul>
<li><a href="#org65f7714">8.1. 设置标题和目录</a></li>
<li><a href="#orgf4d5d23">8.2. 居中</a></li>
<li><a href="#orga9b6ca5">8.3. 注释</a></li>
<li><a href="#org5fd378b">8.4. 分隔符</a></li>
<li><a href="#orgc0cc324">8.5. 引用</a></li>
<li><a href="#org98a41a6">8.6. 多行换行</a></li>
</ul>
</li>
<li><a href="#orgc9b65d8">9. org-clock</a></li>
<li><a href="#org4550970">10. 标题间跳转</a></li>
<li><a href="#orgfb2a4f7">11. how to study emacs</a></li>
<li><a href="#org359d291">12. 查找替换</a></li>
<li><a href="#orge57e66b">13. proced</a></li>
</ul>
</div>
</nav>
<div id="outline-container-orge114c89" class="outline-2">
<h2 id="orge114c89"><span class="section-number-2">1</span> 文件操作</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>C-x d 进入Dired-mode</li>
<li>+ 新建文件夹</li>
<li>C-x C-f 新建文件</li>
<li>C 复制</li>
<li>D 删除</li>
<li>d 标记删除，x执行，u取消</li>
<li>R 重命名文件</li>
<li>C-x C-j 打开当前文件的目录</li>
<li>C-c p f 在当前git中查找</li>
</ul>
</div>
</div>

<div id="outline-container-orge1f7be3" class="outline-2">
<h2 id="orge1f7be3"><span class="section-number-2">2</span> 列表</h2>
<div class="outline-text-2" id="text-2">
<pre class="example">
1. [50%] 任务1
   - [X] t1
   - [ ] t2
2. [1/3] 任务2
   - [ ] t1
   - [X] t2
   - [ ] t3
3. [ ] 任务3
4. [X] 任务4

</pre>
<ol class="org-ol">
<li><code>[50%]</code> 任务1
<ul class="org-ul">
<li class="on"><code>[X]</code> t1</li>
<li class="off"><code>[&#xa0;]</code> t2</li>
</ul></li>
<li><code>[1/3]</code> 任务2
<ul class="org-ul">
<li class="off"><code>[&#xa0;]</code> t1</li>
<li class="on"><code>[X]</code> t2</li>
<li class="off"><code>[&#xa0;]</code> t3</li>
</ul></li>
<li class="off"><code>[&#xa0;]</code> 任务3</li>
<li class="on"><code>[X]</code> 任务4</li>
</ol>
</div>
</div>

<div id="outline-container-orgf240ea5" class="outline-2">
<h2 id="orgf240ea5"><span class="section-number-2">3</span> 表格</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>C-c | 通过输入大小的方式插入表格</li>
<li>C-c C-c 对齐表格</li>
<li>Tab 调到右边一个表格</li>
<li>enter 跳到下方的表格</li>
<li>M-up/right/left/right 上下左右移动行（列）</li>
<li>M-S-up/right/left/right 移动当前行（列）,并插入空行</li>
</ul>

<pre class="example">
| Name | Phone | sub1 | sub2 | total |
|------+-------+------+------+-------|
|kinney|  111  |  111 |  111 |  111  |
</pre>

<table>


<colgroup>
<col  class="org-left">

<col  class="org-right">

<col  class="org-right">

<col  class="org-right">

<col  class="org-right">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Name</th>
<th scope="col" class="org-right">Phone</th>
<th scope="col" class="org-right">sub1</th>
<th scope="col" class="org-right">sub2</th>
<th scope="col" class="org-right">total</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">kinney</td>
<td class="org-right">111</td>
<td class="org-right">111</td>
<td class="org-right">111</td>
<td class="org-right">111</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-orga0c9b1b" class="outline-2">
<h2 id="orga0c9b1b"><span class="section-number-2">4</span> 链接</h2>
<div class="outline-text-2" id="text-4">
<pre class="example">
[[http://orgmode.org/orgguide.pdf]grgguid.pdf]]
[[file:/Users/kinney/Desktop/屏幕快照\2018-08-10\19.33.36.png][链接写法]]
</pre>
<p>
直接显示的图片在Emacs里默认不显示，需按C-c C-x C-v才能显示，在输出成其他格式（html、pdf……）后也能看到.常用快捷键:- C-c C-x C-v 直接预览图片。
</p>
</div>
</div>

<div id="outline-container-org3067241" class="outline-2">
<h2 id="org3067241"><span class="section-number-2">5</span> 待做列表</h2>
<div class="outline-text-2" id="text-5">
<pre class="example">
*DONE [ ] 任务1
*TODO [#A] 任务2
</pre>

<p>
一些常用操作如下： 
</p>
<ul class="org-ul">
<li>C-c C-t 变换TODO的状态</li>
<li>C-c / t以树的形式展示所有的 TODO</li>
<li>C-c C-c 改变 checkbox状态</li>
<li>C-c, 设置优先级（方括号里的ABC）</li>
<li>M-S-RET 插入同级TODO标签</li>
</ul>
</div>
</div>

<div id="outline-container-org4bfebdd" class="outline-2">
<h2 id="org4bfebdd"><span class="section-number-2">6</span> 时间</h2>
<div class="outline-text-2" id="text-6">
<p>
输入C-c . 会出现一个日历，我们点选相应的时间即可插入。
</p>
<pre class="example">
DEADLINE: &lt;2018-08-10 Fri&gt;
SCHEDULED: &lt;2018-08-18 Sat&gt;
</pre>
</div>
</div>

<div id="outline-container-org2835ee0" class="outline-2">
<h2 id="org2835ee0"><span class="section-number-2">7</span> 特殊文本格式</h2>
<div class="outline-text-2" id="text-7">
<pre class="example">
*bold*
/italic/ 
_underline_
=code=
~verbatim~
+strike-through+
</pre>
<p>
<b>bold</b> <br>
<i>italic</i> <br>
<span class="underline">underline</span> <br>
<code>code</code> <br>
<code>verbatim</code> <br>
<del>strike-through</del>
</p>
</div>
</div>

<div id="outline-container-org506963f" class="outline-2">
<h2 id="org506963f"><span class="section-number-2">8</span> 富文本导出</h2>
<div class="outline-text-2" id="text-8">
</div>
<div id="outline-container-org65f7714" class="outline-3">
<h3 id="org65f7714"><span class="section-number-3">8.1</span> 设置标题和目录</h3>
<div class="outline-text-3" id="text-8-1">
<pre class="example">
#+TITLE: This is the title of the document
#+OPTIONS: toc:2 (only to two levels in TOC)
#+OPTIONS: toc:nil (no TOC at all)
</pre>
</div>
</div>
<div id="outline-container-orgf4d5d23" class="outline-3">
<h3 id="orgf4d5d23"><span class="section-number-3">8.2</span> 居中</h3>
<div class="outline-text-3" id="text-8-2">
<pre class="example">
#+BEGIN_CENTER
这里是居中的内容
#+END_CENTER
</pre>

<div class="org-center">
<p>
这里是居中的内容
</p>
</div>
</div>
</div>

<div id="outline-container-orga9b6ca5" class="outline-3">
<h3 id="orga9b6ca5"><span class="section-number-3">8.3</span> 注释</h3>
<div class="outline-text-3" id="text-8-3">
<pre class="example">
#+BEGIN_COMMENT
这里的注视不会被导出
#+END_COMMENT
</pre>
</div>
</div>
<div id="outline-container-org5fd378b" class="outline-3">
<h3 id="org5fd378b"><span class="section-number-3">8.4</span> 分隔符</h3>
<div class="outline-text-3" id="text-8-4">
<pre class="example">
------
</pre>
<hr>
</div>
</div>

<div id="outline-container-orgc0cc324" class="outline-3">
<h3 id="orgc0cc324"><span class="section-number-3">8.5</span> 引用</h3>
<div class="outline-text-3" id="text-8-5">
<pre class="example">
#+BEGIN_QUOTE
这里是引用的内容
#+END_QUOTE
</pre>

<blockquote>
<p>
这里是引用的内容
</p>
</blockquote>
</div>
</div>
<div id="outline-container-org98a41a6" class="outline-3">
<h3 id="org98a41a6"><span class="section-number-3">8.6</span> 多行换行</h3>
<div class="outline-text-3" id="text-8-6">
<pre class="example">
#+BEGIN_VERSE
这里面的
每一行
都可以自动换行
#+END_VERSE
单行换行，在句尾加"\\"
</pre>

<p class="verse">
这里面的<br>
每一行<br>
都可以自动换行<br>
</p>
</div>
</div>
</div>

<div id="outline-container-orgc9b65d8" class="outline-2">
<h2 id="orgc9b65d8"><span class="section-number-2">9</span> org-clock</h2>
<div class="outline-text-2" id="text-9">
<ul class="org-ul">
<li>org-clock-in(C-c C-x C-i)</li>
<li>org-clock-out(C-c C-x C-o)</li>
<li>org-clock-display(C-c C-x C-d)</li>
<li>org-clock-cancle(C-c C-x C-q)</li>
<li>org-clock-report(C-c C-x C-r)</li>
<li>org-dblock-update(C-c C-c), 光标放在#+Begin位置</li>
</ul>
</div>
</div>

<div id="outline-container-org4550970" class="outline-2">
<h2 id="org4550970"><span class="section-number-2">10</span> 标题间跳转</h2>
<div class="outline-text-2" id="text-10">
<ul class="org-ul">
<li>C-c C-n / C-c C-p</li>
</ul>
</div>
</div>

<div id="outline-container-orgfb2a4f7" class="outline-2">
<h2 id="orgfb2a4f7"><span class="section-number-2">11</span> how to study emacs</h2>
<div class="outline-text-2" id="text-11">
<ul class="org-ul">
<li><a href="https://emacs-china.org/t/emacs/7532/16?u=kinneyzhang">https://emacs-china.org/t/emacs/7532/16?u=kinneyzhang</a></li>
</ul>
</div>
</div>

<div id="outline-container-org359d291" class="outline-2">
<h2 id="org359d291"><span class="section-number-2">12</span> 查找替换</h2>
<div class="outline-text-2" id="text-12">
<ul class="org-ul">
<li>M-%</li>
</ul>
</div>
</div>

<div id="outline-container-orge57e66b" class="outline-2">
<h2 id="orge57e66b"><span class="section-number-2">13</span> proced</h2>
<div class="outline-text-2" id="text-13">
<ul class="org-ul">
<li>查看系统进程情况</li>
<li>m标记，x选择向进程发送的命令</li>
<li>按键s前缀选择展现方式</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://blog.geekinney.com/tags.html">Tags</a>: <a href="https://blog.geekinney.com/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://blog.geekinney.com/2019-03-30-emacs-learning-note.html</link>
  <pubDate>Fri, 22 Nov 2019 17:18:23 +0800</pubDate>
</item>
<item>
  <title><![CDATA[链接收藏]]></title>
  <description><![CDATA[
<nav id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgf0acdc7">1. SSR节点</a>
<ul>
<li><a href="#orgd5cd4c7">1.1. <b>IP</b>: 124.156.176.145</a></li>
<li><a href="#org93c948f">1.2. <b>Port</b>: 672</a></li>
</ul>
</li>
<li><a href="#org9cf6465">2. Emacs</a>
<ul>
<li><a href="#orgdce6ec8">2.1. Emacs by Ernst de Hart | ZEEF</a></li>
<li><a href="#orgdd89f98">2.2. GNU Emacs Manuals Online</a></li>
<li><a href="#orgfd66836">2.3. The Org Manual</a></li>
<li><a href="#org3c25f0a">2.4. OrgMode Tutorial by Rainer König</a></li>
<li><a href="#orgf5398a9">2.5. Org Mode - Organize Your Life In Plain Text!</a></li>
<li><a href="#org45c368d">2.6. Org Mode Css Support Manual</a></li>
<li><a href="#org899ab9f">2.7. emacs学习的几条曲线 by lazycat</a></li>
<li><a href="#orgc9d7ada">2.8. org-ql|An Org-mode query language, search command, and agenda-like view</a></li>
<li><a href="#org15d6d71">2.9. Using Emacs org-mode for GTD</a></li>
<li><a href="#orgf465623">2.10. 在 emacs 下使用 mu4e 收發郵件 | coldnew's blog</a></li>
<li><a href="#org3c89db2">2.11. How I use Emacs and Org-mode to implement GTD</a></li>
<li><a href="#org548682a">2.12. Using Ledger for Accounting in Org-mode with Babel</a></li>
<li><a href="#org9f3b27f">2.13. Orgmode for GTD | Emacs café</a></li>
<li><a href="#orgb34f7e6">2.14. 有没有办法让org-mode导出的html页面漂亮一点？ - Emacs-general - Emacs China</a></li>
<li><a href="#org90727fa">2.15. ErgoEmacs | Xah Emacs</a></li>
<li><a href="#org0786eb8">2.16. chrisdone/elisp-guide: A quick guide to Emacs Lisp programming</a></li>
</ul>
</li>
<li><a href="#org8447f0a">3. Solution</a>
<ul>
<li><a href="#org2547ea2">3.1. Django migrations reset</a></li>
<li><a href="#orgb4b2070">3.2. Django博客教程</a></li>
<li><a href="#org1207a2f">3.3. Install and configure mpd and ncmpcpp on MacOS</a></li>
<li><a href="#orge839759">3.4. 用Org-Mode和Jekyll写博客</a></li>
<li><a href="#org42f03ff">3.5. Jekyll 简介及工作原理</a></li>
<li><a href="#org0551e1d">3.6. Apple mov转mp4 ffmpeg使用 | Xenojoshua</a></li>
<li><a href="#orge289f7a">3.7. Fixing GPG "Inappropriate ioctl for device" errors — Daniel15</a></li>
<li><a href="#orgbb608f0">3.8. GPG入门教程 - 阮一峰的网络日志</a></li>
<li><a href="#org12b29be">3.9. Gmail的OfflineIMAP XOAUTH2认证 | MaskRay</a></li>
<li><a href="#org7dd4623">3.10. Ledger &amp; ledger-mode 学习知识点总结 - 找一个吃麦旋风的理由</a></li>
<li><a href="#org0f48f19">3.11. macOS 下对特定软件使用科学代理</a></li>
<li><a href="#org62d8b1d">3.12. 理解OAuth 2.0 - 阮一峰的网络日志</a></li>
</ul>
</li>
<li><a href="#orgb87731e">4. Article</a>
<ul>
<li><a href="#org96609b5">4.1. Sacha Chua's blog</a></li>
<li><a href="#org1ed91a1">4.2. Letters To A New Developer</a></li>
<li><a href="#orgcd4bd97">4.3. design epic life</a></li>
<li><a href="#org58f084a">4.4. 香港不适用西方政党制度 行政主导未得到发挥</a></li>
<li><a href="#orgd56af64">4.5. null program</a></li>
<li><a href="#org79206bb">4.6. 浅谈vpn、vps、Proxy以及shadowsocks之间的联系和区别 - Thomas Xu - Medium</a></li>
</ul>
</li>
<li><a href="#org8bc4fff">5. Utility</a>
<ul>
<li><a href="#org1dd28e0">5.1. font-awesome 图标库</a></li>
<li><a href="#orgf297b93">5.2. bootstrap 4</a></li>
<li><a href="#orgadcd294">5.3. musicbox——网易云音乐CLI</a></li>
<li><a href="#orgfdeb030">5.4. 网易云音乐API</a></li>
<li><a href="#orgb5337c0">5.5. XK-Editor&#x2013;markdown和富文本编辑器</a></li>
<li><a href="#orgbead9bd">5.6. The ultimate CSS tools for web designers | CSSmatic</a></li>
<li><a href="#orgdafa603">5.7. highlight.js</a></li>
<li><a href="#org4e15e15">5.8. julienXX/terminal-notifier: Send User Notifications on macOS from the command-line.</a></li>
</ul>
</li>
<li><a href="#org51a131d">6. Misc</a>
<ul>
<li><a href="#orgc5a96b6">6.1. GitHub中文排行榜!</a></li>
</ul>
</li>
</ul>
</div>
</nav>

<div id="outline-container-orgf0acdc7" class="outline-2">
<h2 id="orgf0acdc7"><span class="section-number-2">1</span> SSR节点</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-orgd5cd4c7" class="outline-3">
<h3 id="orgd5cd4c7"><span class="section-number-3">1.1</span> <b>IP</b>: 124.156.176.145</h3>
</div>
<div id="outline-container-org93c948f" class="outline-3">
<h3 id="org93c948f"><span class="section-number-3">1.2</span> <b>Port</b>: 672</h3>
</div>
</div>

<div id="outline-container-org9cf6465" class="outline-2">
<h2 id="org9cf6465"><span class="section-number-2">2</span> Emacs</h2>
<div class="outline-text-2" id="text-2">
</div>
<div id="outline-container-orgdce6ec8" class="outline-3">
<h3 id="orgdce6ec8"><span class="section-number-3">2.1</span> <a href="https://emacs.zeef.com/ehartc">Emacs by Ernst de Hart | ZEEF</a></h3>
</div>
<div id="outline-container-orgdd89f98" class="outline-3">
<h3 id="orgdd89f98"><span class="section-number-3">2.2</span> <a href="https://www.gnu.org/software/emacs/manual/">GNU Emacs Manuals Online</a></h3>
</div>
<div id="outline-container-orgfd66836" class="outline-3">
<h3 id="orgfd66836"><span class="section-number-3">2.3</span> <a href="https://orgmode.org/org.html">The Org Manual</a></h3>
</div>
<div id="outline-container-org3c25f0a" class="outline-3">
<h3 id="org3c25f0a"><span class="section-number-3">2.4</span> <a href="https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE">OrgMode Tutorial by Rainer König</a></h3>
</div>
<div id="outline-container-orgf5398a9" class="outline-3">
<h3 id="orgf5398a9"><span class="section-number-3">2.5</span> <a href="http://doc.norang.ca/org-mode.html">Org Mode - Organize Your Life In Plain Text!</a></h3>
</div>
<div id="outline-container-org45c368d" class="outline-3">
<h3 id="org45c368d"><span class="section-number-3">2.6</span> <a href="https://orgmode.org/manual/CSS-support.html#CSS-support">Org Mode Css Support Manual</a></h3>
</div>
<div id="outline-container-org899ab9f" class="outline-3">
<h3 id="org899ab9f"><span class="section-number-3">2.7</span> <a href="https://emacs-china.org/t/emacs/7532/16">emacs学习的几条曲线 by lazycat</a></h3>
</div>
<div id="outline-container-orgc9d7ada" class="outline-3">
<h3 id="orgc9d7ada"><span class="section-number-3">2.8</span> <a href="https://github.com/alphapapa/org-ql">org-ql|An Org-mode query language, search command, and agenda-like view</a></h3>
<div class="outline-text-3" id="text-2-8">
</div>
</div>

<div id="outline-container-org15d6d71" class="outline-3">
<h3 id="org15d6d71"><span class="section-number-3">2.9</span> <a href="http://members.optusnet.com.au/~charles57/GTD/orgmode.html#sec-2">Using Emacs org-mode for GTD</a></h3>
<div class="outline-text-3" id="text-2-9">
</div>
</div>

<div id="outline-container-orgf465623" class="outline-3">
<h3 id="orgf465623"><span class="section-number-3">2.10</span> <a href="https://coldnew.github.io/6a7aa5c1/">在 emacs 下使用 mu4e 收發郵件 | coldnew's blog</a></h3>
<div class="outline-text-3" id="text-2-10">
</div>
</div>
<div id="outline-container-org3c89db2" class="outline-3">
<h3 id="org3c89db2"><span class="section-number-3">2.11</span> <a href="http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html">How I use Emacs and Org-mode to implement GTD</a></h3>
<div class="outline-text-3" id="text-2-11">
</div>
</div>

<div id="outline-container-org548682a" class="outline-3">
<h3 id="org548682a"><span class="section-number-3">2.12</span> <a href="https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-ledger.html">Using Ledger for Accounting in Org-mode with Babel</a></h3>
<div class="outline-text-3" id="text-2-12">
</div>
</div>

<div id="outline-container-org9f3b27f" class="outline-3">
<h3 id="org9f3b27f"><span class="section-number-3">2.13</span> <a href="https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html">Orgmode for GTD | Emacs café</a></h3>
<div class="outline-text-3" id="text-2-13">
</div>
</div>

<div id="outline-container-orgb34f7e6" class="outline-3">
<h3 id="orgb34f7e6"><span class="section-number-3">2.14</span> <a href="https://emacs-china.org/t/org-mode-html/10120">有没有办法让org-mode导出的html页面漂亮一点？ - Emacs-general - Emacs China</a></h3>
<div class="outline-text-3" id="text-2-14">
</div>
</div>

<div id="outline-container-org90727fa" class="outline-3">
<h3 id="org90727fa"><span class="section-number-3">2.15</span> <a href="http://ergoemacs.org/index.html">ErgoEmacs | Xah Emacs</a></h3>
<div class="outline-text-3" id="text-2-15">
</div>
</div>

<div id="outline-container-org0786eb8" class="outline-3">
<h3 id="org0786eb8"><span class="section-number-3">2.16</span> <a href="https://github.com/chrisdone/elisp-guide">chrisdone/elisp-guide: A quick guide to Emacs Lisp programming</a></h3>
<div class="outline-text-3" id="text-2-16">
</div>
</div>
</div>

<div id="outline-container-org8447f0a" class="outline-2">
<h2 id="org8447f0a"><span class="section-number-2">3</span> Solution</h2>
<div class="outline-text-2" id="text-3">
</div>
<div id="outline-container-org2547ea2" class="outline-3">
<h3 id="org2547ea2"><span class="section-number-3">3.1</span> <a href="https://simpleisbetterthancomplex.com/tutorial/2016/07/26/how-to-reset-migrations.html">Django migrations reset</a></h3>
</div>
<div id="outline-container-orgb4b2070" class="outline-3">
<h3 id="orgb4b2070"><span class="section-number-3">3.2</span> <a href="https://www.zmrenwu.com/courses/django-blog-tutorial/">Django博客教程</a></h3>
</div>
<div id="outline-container-org1207a2f" class="outline-3">
<h3 id="org1207a2f"><span class="section-number-3">3.3</span> <a href="https://computingforgeeks.com/install-configure-mpd-ncmpcpp-macos/">Install and configure mpd and ncmpcpp on MacOS</a></h3>
</div>
<div id="outline-container-orge839759" class="outline-3">
<h3 id="orge839759"><span class="section-number-3">3.4</span> <a href="https://segmentfault.com/a/1190000008313904">用Org-Mode和Jekyll写博客</a></h3>
</div>
<div id="outline-container-org42f03ff" class="outline-3">
<h3 id="org42f03ff"><span class="section-number-3">3.5</span> <a href="http://xshaun.github.io/jekyll-bootstrap/2014/08/27/jekyllbootstrap5-jekyll-introduction">Jekyll 简介及工作原理</a></h3>
<div class="outline-text-3" id="text-3-5">
</div>
</div>

<div id="outline-container-org0551e1d" class="outline-3">
<h3 id="org0551e1d"><span class="section-number-3">3.6</span> <a href="https://xenojoshua.com/2017/11/ffmpeg/">Apple mov转mp4 ffmpeg使用 | Xenojoshua</a></h3>
<div class="outline-text-3" id="text-3-6">
</div>
</div>

<div id="outline-container-orge289f7a" class="outline-3">
<h3 id="orge289f7a"><span class="section-number-3">3.7</span> <a href="https://d.sb/2016/11/gpg-inappropriate-ioctl-for-device-errors">Fixing GPG "Inappropriate ioctl for device" errors — Daniel15</a></h3>
<div class="outline-text-3" id="text-3-7">
</div>
</div>

<div id="outline-container-orgbb608f0" class="outline-3">
<h3 id="orgbb608f0"><span class="section-number-3">3.8</span> <a href="http://www.ruanyifeng.com/blog/2013/07/gpg.html">GPG入门教程 - 阮一峰的网络日志</a></h3>
<div class="outline-text-3" id="text-3-8">
</div>
</div>

<div id="outline-container-org12b29be" class="outline-3">
<h3 id="org12b29be"><span class="section-number-3">3.9</span> <a href="http://maskray.me/blog/2016-02-12-gmail-offlineimap-xoauth2">Gmail的OfflineIMAP XOAUTH2认证 | MaskRay</a></h3>
<div class="outline-text-3" id="text-3-9">
</div>
</div>

<div id="outline-container-org7dd4623" class="outline-3">
<h3 id="org7dd4623"><span class="section-number-3">3.10</span> <a href="https://zero4drift.github.io/posts/ledger--ledger-mode-xue-xi-zhi-shi-dian-zong-jie/">Ledger &amp; ledger-mode 学习知识点总结 - 找一个吃麦旋风的理由</a></h3>
<div class="outline-text-3" id="text-3-10">
</div>
</div>

<div id="outline-container-org0f48f19" class="outline-3">
<h3 id="org0f48f19"><span class="section-number-3">3.11</span> <a href="https://www.flinty.moe/proxifier-guide/">macOS 下对特定软件使用科学代理</a></h3>
<div class="outline-text-3" id="text-3-11">
</div>
</div>

<div id="outline-container-org62d8b1d" class="outline-3">
<h3 id="org62d8b1d"><span class="section-number-3">3.12</span> <a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">理解OAuth 2.0 - 阮一峰的网络日志</a></h3>
<div class="outline-text-3" id="text-3-12">
</div>
</div>
</div>

<div id="outline-container-orgb87731e" class="outline-2">
<h2 id="orgb87731e"><span class="section-number-2">4</span> Article</h2>
<div class="outline-text-2" id="text-4">
</div>
<div id="outline-container-org96609b5" class="outline-3">
<h3 id="org96609b5"><span class="section-number-3">4.1</span> <a href="https://sachachua.com/blog/2013/08/write-about-what-you-dont-know-5-tips-to-help-you-do-research-for">Sacha Chua's blog</a></h3>
</div>
<div id="outline-container-org1ed91a1" class="outline-3">
<h3 id="org1ed91a1"><span class="section-number-3">4.2</span> <a href="https://letterstoanewdeveloper.com">Letters To A New Developer</a></h3>
</div>
<div id="outline-container-orgcd4bd97" class="outline-3">
<h3 id="orgcd4bd97"><span class="section-number-3">4.3</span> <a href="https://designepiclife.com">design epic life</a></h3>
</div>
<div id="outline-container-org58f084a" class="outline-3">
<h3 id="org58f084a"><span class="section-number-3">4.4</span> <a href="https://m.guancha.cn/politics/2017_06_10_412579.shtml">香港不适用西方政党制度 行政主导未得到发挥</a></h3>
</div>
<div id="outline-container-orgd56af64" class="outline-3">
<h3 id="orgd56af64"><span class="section-number-3">4.5</span> <a href="https://nullprogram.com/">null program</a></h3>
<div class="outline-text-3" id="text-4-5">
</div>
</div>


<div id="outline-container-org79206bb" class="outline-3">
<h3 id="org79206bb"><span class="section-number-3">4.6</span> <a href="https://medium.com/@thomas_summon/%E6%B5%85%E8%B0%88vpn-vps-proxy%E4%BB%A5%E5%8F%8Ashadowsocks%E4%B9%8B%E9%97%B4%E7%9A%84%E8%81%94%E7%B3%BB%E5%92%8C%E5%8C%BA%E5%88%AB-b0198f92db1b">浅谈vpn、vps、Proxy以及shadowsocks之间的联系和区别 - Thomas Xu - Medium</a></h3>
<div class="outline-text-3" id="text-4-6">
</div>
</div>
</div>

<div id="outline-container-org8bc4fff" class="outline-2">
<h2 id="org8bc4fff"><span class="section-number-2">5</span> Utility</h2>
<div class="outline-text-2" id="text-5">
</div>
<div id="outline-container-org1dd28e0" class="outline-3">
<h3 id="org1dd28e0"><span class="section-number-3">5.1</span> <a href="http://www.fontawesome.com.cn/faicons/">font-awesome 图标库</a></h3>
</div>
<div id="outline-container-orgf297b93" class="outline-3">
<h3 id="orgf297b93"><span class="section-number-3">5.2</span> <a href="https://getbootstrap.net/docs/utilities/shadows/">bootstrap 4</a></h3>
</div>
<div id="outline-container-orgadcd294" class="outline-3">
<h3 id="orgadcd294"><span class="section-number-3">5.3</span> <a href="https://github.com/darknessomi/musicbox">musicbox——网易云音乐CLI</a></h3>
</div>
<div id="outline-container-orgfdeb030" class="outline-3">
<h3 id="orgfdeb030"><span class="section-number-3">5.4</span> <a href="https://github.com/Binaryify/NeteaseCloudMusicApi">网易云音乐API</a></h3>
</div>
<div id="outline-container-orgb5337c0" class="outline-3">
<h3 id="orgb5337c0"><span class="section-number-3">5.5</span> <a href="https://xkeditor.ixk.me">XK-Editor&#x2013;markdown和富文本编辑器</a></h3>
</div>
<div id="outline-container-orgbead9bd" class="outline-3">
<h3 id="orgbead9bd"><span class="section-number-3">5.6</span> <a href="https://www.cssmatic.com/">The ultimate CSS tools for web designers | CSSmatic</a></h3>
<div class="outline-text-3" id="text-5-6">
</div>
</div>

<div id="outline-container-orgdafa603" class="outline-3">
<h3 id="orgdafa603"><span class="section-number-3">5.7</span> <a href="https://highlightjs.org/">highlight.js</a></h3>
<div class="outline-text-3" id="text-5-7">
</div>
</div>

<div id="outline-container-org4e15e15" class="outline-3">
<h3 id="org4e15e15"><span class="section-number-3">5.8</span> <a href="https://github.com/julienXX/terminal-notifier">julienXX/terminal-notifier: Send User Notifications on macOS from the command-line.</a></h3>
<div class="outline-text-3" id="text-5-8">
</div>
</div>
</div>

<div id="outline-container-org51a131d" class="outline-2">
<h2 id="org51a131d"><span class="section-number-2">6</span> Misc</h2>
<div class="outline-text-2" id="text-6">
</div>
<div id="outline-container-orgc5a96b6" class="outline-3">
<h3 id="orgc5a96b6"><span class="section-number-3">6.1</span> <a href="https://github.com/kon9chunkit/GitHub-Chinese-Top-Charts">GitHub中文排行榜!</a></h3>
<div class="outline-text-3" id="text-6-1">
</div>
</div>
</div>
<div class="taglist"><a href="https://blog.geekinney.com/tags.html">Tags</a>: <a href="https://blog.geekinney.com/tag-bookmark.html">bookmark</a> </div>]]></description>
  <category><![CDATA[bookmark]]></category>
  <link>https://blog.geekinney.com/2019-01-01-bookmark.html</link>
  <pubDate>Fri, 22 Nov 2019 17:18:23 +0800</pubDate>
</item>
<item>
  <title><![CDATA[hello world]]></title>
  <description><![CDATA[
<p>
hhello world
</p>
<div class="taglist"><a href="https://blog.geekinney.com/tags.html">Tags</a>: <a href="https://blog.geekinney.com/tag-hello.html">hello</a> </div>]]></description>
  <category><![CDATA[hello]]></category>
  <link>https://blog.geekinney.com/2019-11-22-hello-world.html</link>
  <pubDate>Fri, 22 Nov 2019 16:50:00 +0800</pubDate>
</item>
</channel>
</rss>
